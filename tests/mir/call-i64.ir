; RUN: ircompiler %s -f 0 --args 1 | FileCheck %s -check-prefix CHECK1
; RUN: ircompiler %s -f 1 --args 1 2 | FileCheck %s -check-prefix CHECK2
; RUN: ircompiler %s -f 2 --args 1 2 3 | FileCheck %s -check-prefix CHECK3
; RUN: ircompiler %s -f 3 --args 1 2 3 4 | FileCheck %s -check-prefix CHECK4
; RUN: ircompiler %s -f 4 --args 1 2 3 4 5 | FileCheck %s -check-prefix CHECK5
; RUN: ircompiler %s -f 5 --args 1 2 3 4 5 6 | FileCheck %s -check-prefix CHECK6
; RUN: ircompiler %s -f 6 --args 1 2 3 4 5 6 7 | FileCheck %s -check-prefix CHECK7
; RUN: ircompiler %s -f 7 --args 1 2 3 4 5 6 7 8 | FileCheck %s -check-prefix CHECK8
; RUN: ircompiler %s -f 8 --args 1 2 3 4 5 6 7 8 9 | FileCheck %s -check-prefix CHECK9
; RUN: ircompiler %s -f 9 --args 1 2 3 4 5 6 7 8 9 10 | FileCheck %s -check-prefix CHECK10
; RUN: ircompiler %s -f 10 --args 1 | FileCheck %s -check-prefix CHECK11
; RUN: ircompiler %s -f 11 --args 1 2 | FileCheck %s -check-prefix CHECK12
; RUN: ircompiler %s -f 12 --args 1 2 3 | FileCheck %s -check-prefix CHECK13
; RUN: ircompiler %s -f 13 --args 1 2 3 4 | FileCheck %s -check-prefix CHECK14
; RUN: ircompiler %s -f 14 --args 1 2 3 4 5 | FileCheck %s -check-prefix CHECK15
; RUN: ircompiler %s -f 15 --args 1 2 3 4 5 6 | FileCheck %s -check-prefix CHECK16
; RUN: ircompiler %s -f 16 --args 1 2 3 4 5 6 7 | FileCheck %s -check-prefix CHECK17
; RUN: ircompiler %s -f 17 --args 1 2 3 4 5 6 7 8 | FileCheck %s -check-prefix CHECK18
; RUN: ircompiler %s -f 18 --args 1 2 3 4 5 6 7 8 9 | FileCheck %s -check-prefix CHECK19
; RUN: ircompiler %s -f 19 --args 1 2 3 4 5 6 7 8 9 10 | FileCheck %s -check-prefix CHECK20

; CHECK1: 0x1:i64
; CHECK2: 0x3:i64
; CHECK3: 0x6:i64
; CHECK4: 0xa:i64
; CHECK5: 0xf:i64
; CHECK6: 0x15:i64
; CHECK7: 0x1c:i64
; CHECK8: 0x24:i64
; CHECK9: 0x2d:i64
; CHECK10: 0x37:i64
; CHECK11: 0x1:i64
; CHECK12: 0x3:i64
; CHECK13: 0x6:i64
; CHECK14: 0xa:i64
; CHECK15: 0xf:i64
; CHECK16: 0x15:i64
; CHECK17: 0x1c:i64
; CHECK18: 0x24:i64
; CHECK19: 0x2d:i64
; CHECK20: 0x37:i64

; 以下部分为形参个数为1-10个的callee函数

func %0 (i64) -> i64 {
@0:
    return $0
}

func %1 (i64, i64) -> i64 {
    var $2 i64
@0:
    $2 = add ($0, $1)
    return $2
}

func %2 (i64, i64, i64) -> i64 {
    var $3 i64
    var $4 i64
@0:
    $3 = add ($0, $1)
    $4 = add ($3, $2)
    return $4
}

func %3 (i64, i64, i64, i64) -> i64 {
    var $4 i64
    var $5 i64
    var $6 i64
@0:
    $4 = add ($0, $1)
    $5 = add ($4, $2)
    $6 = add ($5, $3)
    return $6
}

func %4 (i64, i64, i64, i64, i64) -> i64 {
    var $5 i64
    var $6 i64
    var $7 i64
    var $8 i64
@0:
    $5 = add ($0, $1)
    $6 = add ($5, $2)
    $7 = add ($6, $3)
    $8 = add ($7, $4)
    return $8
}

func %5 (i64, i64, i64, i64, i64, i64) -> i64 {
    var $6 i64
    var $7 i64
    var $8 i64
    var $9 i64
    var $10 i64
@0:
    $6 = add ($0, $1)
    $7 = add ($6, $2) 
    $8 = add ($7, $3)
    $9 = add ($8, $4)
    $10 = add ($9, $5)
    return $10
}

func %6 (i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $7 i64
    var $8 i64
    var $9 i64
    var $10 i64
    var $11 i64
    var $12 i64
@0:
    $7 = add ($0, $1)
    $8 = add ($7, $2) 
    $9 = add ($8, $3)
    $10 = add ($9, $4)
    $11 = add ($10, $5)
    $12 = add ($11, $6)
    return $12
}

func %7 (i64, i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $8 i64
    var $9 i64
    var $10 i64
    var $11 i64
    var $12 i64
    var $13 i64
    var $14 i64
@0:
    $8 = add ($0, $1)
    $9 = add ($8, $2) 
    $10 = add ($9, $3)
    $11 = add ($10, $4)
    $12 = add ($11, $5)
    $13 = add ($12, $6)
    $14 = add ($13, $7)
    return $14
}

func %8 (i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $9 i64
    var $10 i64
    var $11 i64
    var $12 i64
    var $13 i64
    var $14 i64
    var $15 i64
    var $16 i64
@0:
    $9 = add ($0, $1)
    $10 = add ($9, $2) 
    $11 = add ($10, $3)
    $12 = add ($11, $4)
    $13 = add ($12, $5)
    $14 = add ($13, $6)
    $15 = add ($14, $7)
    $16 = add ($15, $8)
    return $16
}

func %9 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $10 i64
    var $11 i64
    var $12 i64
    var $13 i64
    var $14 i64
    var $15 i64
    var $16 i64
    var $17 i64
    var $18 i64
@0:
    $10 = add ($0, $1)
    $11 = add ($10, $2) 
    $12 = add ($11, $3)
    $13 = add ($12, $4)
    $14 = add ($13, $5)
    $15 = add ($14, $6)
    $16 = add ($15, $7)
    $17 = add ($16, $8)
    $18 = add ($17, $9)
    return $18
}

; 以下部分为实参个数为1-10个的caller函数

func %10 (i64) -> i64 {
    var $1 i64
@0:
    $1 = call %0 ($0)
    return $1
}

func %11 (i64, i64) -> i64 {
    var $2 i64
@0:
    $2 = call %1 ($0, $1)
    return $2
}

func %12 (i64, i64, i64) -> i64 {
    var $3 i64
@0:
    $3 = call %2 ($0, $1, $2)
    return $3
}

func %13 (i64, i64, i64, i64) -> i64 {
    var $4 i64
@0:
    $4 = call %3 ($0, $1, $2, $3)
    return $4
}

func %14 (i64, i64, i64, i64, i64) -> i64 {
    var $5 i64
@0:
    $5 = call %4 ($0, $1, $2, $3, $4)
    return $5
}

func %15 (i64, i64, i64, i64, i64, i64) -> i64 {
    var $6 i64
@0:
    $6 = call %5 ($0, $1, $2, $3, $4, $5)
    return $6
}

func %16 (i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $7 i64
@0:
    $7 = call %6 ($0, $1, $2, $3, $4, $5, $6)
    return $7
}

func %17 (i64, i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $8 i64
@0:
    $8 = call %7 ($0, $1, $2, $3, $4, $5, $6, $7)
    return $8
}

func %18 (i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $9 i64
@0:
    $9 = call %8 ($0, $1, $2, $3, $4, $5, $6, $7, $8)
    return $9
}

func %19 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 {
    var $10 i64
@0:
    $10 = call %9 ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9)
    return $10
}
