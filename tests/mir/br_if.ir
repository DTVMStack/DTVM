; ************************************ If-Else-End Cases ************************************


; RUN: ircompiler %s -f 0 --args 0 15 64 | FileCheck %s -check-prefix CHECK0_1
; RUN: ircompiler %s -f 0 --args 1 15 64 | FileCheck %s -check-prefix CHECK0_2
; RUN: ircompiler %s -f 0 --args 10 15 64 | FileCheck %s -check-prefix CHECK0_3
; RUN: ircompiler %s -f 0 --args -10 15 64 | FileCheck %s -check-prefix CHECK0_4
; RUN: ircompiler %s -f 0 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK0_5

; CHECK0_1: 0x40:i32
; CHECK0_2: 0xf:i32
; CHECK0_3: 0xf:i32
; CHECK0_4: 0xf:i32
; CHECK0_5: 0xf:i32

func %0 (i32, i32, i32) -> i32 {
    var $3 i32
@0:
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @3
@2:
    $3 = $2;
    br @3
@3:
    return $3
}


; RUN: ircompiler %s -f 1 --args 0 15 64 | FileCheck %s -check-prefix CHECK1_1
; RUN: ircompiler %s -f 1 --args 1 15 64 | FileCheck %s -check-prefix CHECK1_2
; RUN: ircompiler %s -f 1 --args 10 15 64 | FileCheck %s -check-prefix CHECK1_3
; RUN: ircompiler %s -f 1 --args -10 15 64 | FileCheck %s -check-prefix CHECK1_4
; RUN: ircompiler %s -f 1 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK1_5

; CHECK1_1: 0x40:i64
; CHECK1_2: 0xf:i64
; CHECK1_3: 0xf:i64
; CHECK1_4: 0xf:i64
; CHECK1_5: 0xf:i64

func %1 (i32, i64, i64) -> i64 {
    var $3 i64
@0:
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @3
@2:
    $3 = $2;
    br @3
@3:
    return $3
}


; RUN: ircompiler %s -f 2 --args 0 15 64 | FileCheck %s -check-prefix CHECK2_1
; RUN: ircompiler %s -f 2 --args 1 15 64 | FileCheck %s -check-prefix CHECK2_2
; RUN: ircompiler %s -f 2 --args 10 15 64 | FileCheck %s -check-prefix CHECK2_3
; RUN: ircompiler %s -f 2 --args -10 15 64 | FileCheck %s -check-prefix CHECK2_4
; RUN: ircompiler %s -f 2 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK2_5

; CHECK2_1: 64:f32
; CHECK2_2: 15:f32
; CHECK2_3: 15:f32
; CHECK2_4: 15:f32
; CHECK2_5: 15:f32

func %2 (i32, f32, f32) -> f32 {
    var $3 f32
@0:
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @3
@2:
    $3 = $2;
    br @3
@3:
    return $3
}


; RUN: ircompiler %s -f 3 --args 0 15 64 | FileCheck %s -check-prefix CHECK3_1
; RUN: ircompiler %s -f 3 --args 1 15 64 | FileCheck %s -check-prefix CHECK3_2
; RUN: ircompiler %s -f 3 --args 10 15 64 | FileCheck %s -check-prefix CHECK3_3
; RUN: ircompiler %s -f 3 --args -10 15 64 | FileCheck %s -check-prefix CHECK3_4
; RUN: ircompiler %s -f 3 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK3_5

; CHECK3_1: 64:f64
; CHECK3_2: 15:f64
; CHECK3_3: 15:f64
; CHECK3_4: 15:f64
; CHECK3_5: 15:f64

func %3 (i32, f64, f64) -> f64 {
    var $3 f64
@0:
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @3
@2:
    $3 = $2;
    br @3
@3:
    return $3
}


; ************************************ If-End Cases ************************************


; RUN: ircompiler %s -f 4 --args 0 15 64 | FileCheck %s -check-prefix CHECK4_1
; RUN: ircompiler %s -f 4 --args 1 15 64 | FileCheck %s -check-prefix CHECK4_2
; RUN: ircompiler %s -f 4 --args 10 15 64 | FileCheck %s -check-prefix CHECK4_3
; RUN: ircompiler %s -f 4 --args -10 15 64 | FileCheck %s -check-prefix CHECK4_4
; RUN: ircompiler %s -f 4 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK4_5

; CHECK4_1: 0x40:i32
; CHECK4_2: 0xf:i32
; CHECK4_3: 0xf:i32
; CHECK4_4: 0xf:i32
; CHECK4_5: 0xf:i32

func %4 (i32, i32, i32) -> i32 {
    var $3 i32
@0:
    $3 = $2
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @2
@2:
    return $3
}



; RUN: ircompiler %s -f 5 --args 0 15 64 | FileCheck %s -check-prefix CHECK5_1
; RUN: ircompiler %s -f 5 --args 1 15 64 | FileCheck %s -check-prefix CHECK5_2
; RUN: ircompiler %s -f 5 --args 10 15 64 | FileCheck %s -check-prefix CHECK5_3
; RUN: ircompiler %s -f 5 --args -10 15 64 | FileCheck %s -check-prefix CHECK5_4
; RUN: ircompiler %s -f 5 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK5_5

; CHECK5_1: 0x40:i64
; CHECK5_2: 0xf:i64
; CHECK5_3: 0xf:i64
; CHECK5_4: 0xf:i64
; CHECK5_5: 0xf:i64

func %5 (i32, i64, i64) -> i64 {
    var $3 i64
@0:
    $3 = $2
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @2
@2:
    return $3
}


; RUN: ircompiler %s -f 6 --args 0 15 64 | FileCheck %s -check-prefix CHECK6_1
; RUN: ircompiler %s -f 6 --args 1 15 64 | FileCheck %s -check-prefix CHECK6_2
; RUN: ircompiler %s -f 6 --args 10 15 64 | FileCheck %s -check-prefix CHECK6_3
; RUN: ircompiler %s -f 6 --args -10 15 64 | FileCheck %s -check-prefix CHECK6_4
; RUN: ircompiler %s -f 6 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK6_5

; CHECK6_1: 64:f32
; CHECK6_2: 15:f32
; CHECK6_3: 15:f32
; CHECK6_4: 15:f32
; CHECK6_5: 15:f32

func %6 (i32, f32, f32) -> f32 {
    var $3 f32
@0:
    $3 = $2
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @2
@2:
    return $3
}


; RUN: ircompiler %s -f 7 --args 0 15 64 | FileCheck %s -check-prefix CHECK7_1
; RUN: ircompiler %s -f 7 --args 1 15 64 | FileCheck %s -check-prefix CHECK7_2
; RUN: ircompiler %s -f 7 --args 10 15 64 | FileCheck %s -check-prefix CHECK7_3
; RUN: ircompiler %s -f 7 --args -10 15 64 | FileCheck %s -check-prefix CHECK7_4
; RUN: ircompiler %s -f 7 --args 2147483647 15 64 | FileCheck %s -check-prefix CHECK7_5

; CHECK7_1: 64:f64
; CHECK7_2: 15:f64
; CHECK7_3: 15:f64
; CHECK7_4: 15:f64
; CHECK7_5: 15:f64

func %7 (i32, f64, f64) -> f64 {
    var $3 f64
@0:
    $3 = $2
    br_if $0, @1, @2
@1:
    $3 = $1;
    br @2
@2:
    return $3
}


; ************************************ Loop Cases ************************************


; RUN: ircompiler %s -f 8 --args -20 | FileCheck %s -check-prefix CHECK8_1
; RUN: ircompiler %s -f 8 --args -1 | FileCheck %s -check-prefix CHECK8_2
; RUN: ircompiler %s -f 8 --args 0 | FileCheck %s -check-prefix CHECK8_3
; RUN: ircompiler %s -f 8 --args 1 | FileCheck %s -check-prefix CHECK8_4
; RUN: ircompiler %s -f 8 --args 5 | FileCheck %s -check-prefix CHECK8_5
; RUN: ircompiler %s -f 8 --args 10 | FileCheck %s -check-prefix CHECK8_6
; RUN: ircompiler %s -f 8 --args 20 | FileCheck %s -check-prefix CHECK8_7
; RUN: ircompiler %s -f 8 --args 50 | FileCheck %s -check-prefix CHECK8_8
; RUN: ircompiler %s -f 8 --args 100 | FileCheck %s -check-prefix CHECK8_9

; CHECK8_1: 0x0:i32
; CHECK8_2: 0x0:i32
; CHECK8_3: 0x0:i32
; CHECK8_4: 0x0:i32
; CHECK8_5: 0xa:i32
; CHECK8_6: 0x2d:i32
; CHECK8_7: 0xbe:i32
; CHECK8_8: 0x4c9:i32
; CHECK8_9: 0x1356:i32

func %8 (i32) -> i32 {
    var $1 i32
    var $2 i32
    var $3 i32
@0:
    $1 = const.i32 0
    $2 = const.i32 0
    br @1
@1:
    $3 = cmp islt ($1, $0)
    br_if $3, @2, @3
@2:
    $2 = add ($2, $1)
    $1 = add ($1, const.i32 1)
    br @1
@3:
    return $2
}


; RUN: ircompiler %s -f 9 --args -20 | FileCheck %s -check-prefix CHECK9_1
; RUN: ircompiler %s -f 9 --args -1 | FileCheck %s -check-prefix CHECK9_2
; RUN: ircompiler %s -f 9 --args 0 | FileCheck %s -check-prefix CHECK9_3
; RUN: ircompiler %s -f 9 --args 1 | FileCheck %s -check-prefix CHECK9_4
; RUN: ircompiler %s -f 9 --args 5 | FileCheck %s -check-prefix CHECK9_5
; RUN: ircompiler %s -f 9 --args 10 | FileCheck %s -check-prefix CHECK9_6
; RUN: ircompiler %s -f 9 --args 20 | FileCheck %s -check-prefix CHECK9_7
; RUN: ircompiler %s -f 9 --args 50 | FileCheck %s -check-prefix CHECK9_8
; RUN: ircompiler %s -f 9 --args 100 | FileCheck %s -check-prefix CHECK9_9

; CHECK9_1: 0x0:i64
; CHECK9_2: 0x0:i64
; CHECK9_3: 0x0:i64
; CHECK9_4: 0x0:i64
; CHECK9_5: 0xa:i64
; CHECK9_6: 0x2d:i64
; CHECK9_7: 0xbe:i64
; CHECK9_8: 0x4c9:i64
; CHECK9_9: 0x1356:i64

func %9 (i64) -> i64 {
    var $1 i64
    var $2 i64
    var $3 i32
@0:
    $1 = const.i64 0
    $2 = const.i64 0
    br @1
@1:
    $3 = cmp islt ($1, $0)
    br_if $3, @2, @3
@2:
    $2 = add ($2, $1)
    $1 = add ($1, const.i64 1)
    br @1
@3:
    return $2
}


; RUN: ircompiler %s -f 10 --args -20 | FileCheck %s -check-prefix CHECK10_1
; RUN: ircompiler %s -f 10 --args -1 | FileCheck %s -check-prefix CHECK10_2
; RUN: ircompiler %s -f 10 --args 0 | FileCheck %s -check-prefix CHECK10_3
; RUN: ircompiler %s -f 10 --args 1 | FileCheck %s -check-prefix CHECK10_4
; RUN: ircompiler %s -f 10 --args 5 | FileCheck %s -check-prefix CHECK10_5
; RUN: ircompiler %s -f 10 --args 10 | FileCheck %s -check-prefix CHECK10_6
; RUN: ircompiler %s -f 10 --args 20 | FileCheck %s -check-prefix CHECK10_7
; RUN: ircompiler %s -f 10 --args 50 | FileCheck %s -check-prefix CHECK10_8
; RUN: ircompiler %s -f 10 --args 100 | FileCheck %s -check-prefix CHECK10_9

; CHECK10_1: 0:f32
; CHECK10_2: 0:f32
; CHECK10_3: 0:f32
; CHECK10_4: 0:f32
; CHECK10_5: 10:f32
; CHECK10_6: 45:f32
; CHECK10_7: 190:f32
; CHECK10_8: 1225:f32
; CHECK10_9: 4950:f32

func %10 (f32) -> f32 {
    var $1 f32
    var $2 f32
    var $3 i32
@0:
    $1 = const.f32 0
    $2 = const.f32 0
    br @1
@1:
    $3 = cmp folt ($1, $0)
    br_if $3, @2, @3
@2:
    $2 = add ($2, $1)
    $1 = add ($1, const.f32 1)
    br @1
@3:
    return $2
}


; RUN: ircompiler %s -f 11 --args -20 | FileCheck %s -check-prefix CHECK11_1
; RUN: ircompiler %s -f 11 --args -1 | FileCheck %s -check-prefix CHECK11_2
; RUN: ircompiler %s -f 11 --args 0 | FileCheck %s -check-prefix CHECK11_3
; RUN: ircompiler %s -f 11 --args 1 | FileCheck %s -check-prefix CHECK11_4
; RUN: ircompiler %s -f 11 --args 5 | FileCheck %s -check-prefix CHECK11_5
; RUN: ircompiler %s -f 11 --args 10 | FileCheck %s -check-prefix CHECK11_6
; RUN: ircompiler %s -f 11 --args 20 | FileCheck %s -check-prefix CHECK11_7
; RUN: ircompiler %s -f 11 --args 50 | FileCheck %s -check-prefix CHECK11_8
; RUN: ircompiler %s -f 11 --args 100 | FileCheck %s -check-prefix CHECK11_9

; CHECK11_1: 0:f64
; CHECK11_2: 0:f64
; CHECK11_3: 0:f64
; CHECK11_4: 0:f64
; CHECK11_5: 10:f64
; CHECK11_6: 45:f64
; CHECK11_7: 190:f64
; CHECK11_8: 1225:f64
; CHECK11_9: 4950:f64

func %11 (f64) -> f64 {
    var $1 f64
    var $2 f64
    var $3 i32
@0:
    $1 = const.f64 0
    $2 = const.f64 0
    br @1
@1:
    $3 = cmp folt ($1, $0)
    br_if $3, @2, @3
@2:
    $2 = add ($2, $1)
    $1 = add ($1, const.f64 1)
    br @1
@3:
    return $2
}