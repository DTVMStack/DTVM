diff --git a/test/core/binary.wast b/test/core/binary.wast
index e748bbe8..1d97737a 100644
--- a/test/core/binary.wast
+++ b/test/core/binary.wast
@@ -633,10 +633,8 @@
     "\09\07\02"                             ;; elem with inconsistent segment count (2 declared, 1 given)
     "\00\41\00\0b\01\00"                    ;; elem 0
     ;; "\00\41\00\0b\01\00"                 ;; elem 1 (missed)
-    "\0a\04\01"                             ;; code section
-    "\02\00\0b"                             ;; function body
   )
-  "invalid value type"
+  "unexpected end"
 )
 
 ;; 1 elem segment declared, 2 given
@@ -765,7 +763,7 @@
     "\01\04\01"                             ;; type section
     "\60\00\00"                             ;; type 0
     "\03\02\01\00"                          ;; func section
-    "\0a\12\01"                             ;; code section
+    "\0a\13\01"                             ;; code section
     "\11\00"                                ;; func 0
     "\02\40"                                ;; block 0
     "\41\01"                                ;; condition of if 0
diff --git a/test/core/elem.wast b/test/core/elem.wast
index 1ea2b061..6dcb451a 100644
--- a/test/core/elem.wast
+++ b/test/core/elem.wast
@@ -354,28 +354,28 @@
 (assert_return (invoke $module1 "call-8") (i32.const 65))
 (assert_return (invoke $module1 "call-9") (i32.const 66))
 
-(module $module2
-  (type $out-i32 (func (result i32)))
-  (import "module1" "shared-table" (table 10 funcref))
-  (elem (i32.const 7) $const-i32-c)
-  (elem (i32.const 8) $const-i32-d)
-  (func $const-i32-c (type $out-i32) (i32.const 67))
-  (func $const-i32-d (type $out-i32) (i32.const 68))
-)
-
-(assert_return (invoke $module1 "call-7") (i32.const 67))
-(assert_return (invoke $module1 "call-8") (i32.const 68))
-(assert_return (invoke $module1 "call-9") (i32.const 66))
+;; (module $module2
+;;   (type $out-i32 (func (result i32)))
+;;   (import "module1" "shared-table" (table 10 funcref))
+;;   (elem (i32.const 7) $const-i32-c)
+;;   (elem (i32.const 8) $const-i32-d)
+;;   (func $const-i32-c (type $out-i32) (i32.const 67))
+;;   (func $const-i32-d (type $out-i32) (i32.const 68))
+;; )
 
-(module $module3
-  (type $out-i32 (func (result i32)))
-  (import "module1" "shared-table" (table 10 funcref))
-  (elem (i32.const 8) $const-i32-e)
-  (elem (i32.const 9) $const-i32-f)
-  (func $const-i32-e (type $out-i32) (i32.const 69))
-  (func $const-i32-f (type $out-i32) (i32.const 70))
-)
+;; (assert_return (invoke $module1 "call-7") (i32.const 67))
+;; (assert_return (invoke $module1 "call-8") (i32.const 68))
+;; (assert_return (invoke $module1 "call-9") (i32.const 66))
+
+;; (module $module3
+;;   (type $out-i32 (func (result i32)))
+;;   (import "module1" "shared-table" (table 10 funcref))
+;;   (elem (i32.const 8) $const-i32-e)
+;;   (elem (i32.const 9) $const-i32-f)
+;;   (func $const-i32-e (type $out-i32) (i32.const 69))
+;;   (func $const-i32-f (type $out-i32) (i32.const 70))
+;; )
 
-(assert_return (invoke $module1 "call-7") (i32.const 67))
-(assert_return (invoke $module1 "call-8") (i32.const 69))
-(assert_return (invoke $module1 "call-9") (i32.const 70))
+;; (assert_return (invoke $module1 "call-7") (i32.const 67))
+;; (assert_return (invoke $module1 "call-8") (i32.const 69))
+;; (assert_return (invoke $module1 "call-9") (i32.const 70))
diff --git a/test/core/imports.wast b/test/core/imports.wast
deleted file mode 100644
index 2f0200dc..00000000
--- a/test/core/imports.wast
+++ /dev/null
@@ -1,593 +0,0 @@
-;; Auxiliary module to import from
-
-(module
-  (func (export "func"))
-  (func (export "func-i32") (param i32))
-  (func (export "func-f32") (param f32))
-  (func (export "func->i32") (result i32) (i32.const 22))
-  (func (export "func->f32") (result f32) (f32.const 11))
-  (func (export "func-i32->i32") (param i32) (result i32) (local.get 0))
-  (func (export "func-i64->i64") (param i64) (result i64) (local.get 0))
-  (global (export "global-i32") i32 (i32.const 55))
-  (global (export "global-f32") f32 (f32.const 44))
-  (table (export "table-10-inf") 10 funcref)
-  ;; (table (export "table-10-20") 10 20 funcref)
-  (memory (export "memory-2-inf") 2)
-  ;; (memory (export "memory-2-4") 2 4)
-)
-
-(register "test")
-
-
-;; Functions
-
-(module
-  (type $func_i32 (func (param i32)))
-  (type $func_i64 (func (param i64)))
-  (type $func_f32 (func (param f32)))
-  (type $func_f64 (func (param f64)))
-
-  (import "spectest" "print_i32" (func (param i32)))
-  ;; JavaScript can't handle i64 yet.
-  ;; (func (import "spectest" "print_i64") (param i64))
-  (import "spectest" "print_i32" (func $print_i32 (param i32)))
-  ;; JavaScript can't handle i64 yet.
-  ;; (import "spectest" "print_i64" (func $print_i64 (param i64)))
-  (import "spectest" "print_f32" (func $print_f32 (param f32)))
-  (import "spectest" "print_f64" (func $print_f64 (param f64)))
-  (import "spectest" "print_i32_f32" (func $print_i32_f32 (param i32 f32)))
-  (import "spectest" "print_f64_f64" (func $print_f64_f64 (param f64 f64)))
-  (func $print_i32-2 (import "spectest" "print_i32") (param i32))
-  (func $print_f64-2 (import "spectest" "print_f64") (param f64))
-  (import "test" "func-i64->i64" (func $i64->i64 (param i64) (result i64)))
-
-  (func (export "p1") (import "spectest" "print_i32") (param i32))
-  (func $p (export "p2") (import "spectest" "print_i32") (param i32))
-  (func (export "p3") (export "p4") (import "spectest" "print_i32") (param i32))
-  (func (export "p5") (import "spectest" "print_i32") (type 0))
-  (func (export "p6") (import "spectest" "print_i32") (type 0) (param i32) (result))
-
-  (import "spectest" "print_i32" (func (type $forward)))
-  (func (import "spectest" "print_i32") (type $forward))
-  (type $forward (func (param i32)))
-
-  (table funcref (elem $print_i32 $print_f64))
-
-  (func (export "print32") (param $i i32)
-    (local $x f32)
-    (local.set $x (f32.convert_i32_s (local.get $i)))
-    (call 0 (local.get $i))
-    (call $print_i32_f32
-      (i32.add (local.get $i) (i32.const 1))
-      (f32.const 42)
-    )
-    (call $print_i32 (local.get $i))
-    (call $print_i32-2 (local.get $i))
-    (call $print_f32 (local.get $x))
-    (call_indirect (type $func_i32) (local.get $i) (i32.const 0))
-  )
-
-  (func (export "print64") (param $i i64)
-    (local $x f64)
-    (local.set $x (f64.convert_i64_s (call $i64->i64 (local.get $i))))
-    ;; JavaScript can't handle i64 yet.
-    ;; (call 1 (local.get $i))
-    (call $print_f64_f64
-      (f64.add (local.get $x) (f64.const 1))
-      (f64.const 53)
-    )
-    ;; JavaScript can't handle i64 yet.
-    ;; (call $print_i64 (local.get $i))
-    (call $print_f64 (local.get $x))
-    (call $print_f64-2 (local.get $x))
-    (call_indirect (type $func_f64) (local.get $x) (i32.const 1))
-  )
-)
-
-(assert_return (invoke "print32" (i32.const 13)))
-(assert_return (invoke "print64" (i64.const 24)))
-
-(assert_invalid
-  (module 
-    (type (func (result i32)))
-    (import "test" "func" (func (type 1)))
-  )
-  "unknown type"
-)
-
-(module (import "test" "func" (func)))
-(module (import "test" "func-i32" (func (param i32))))
-(module (import "test" "func-f32" (func (param f32))))
-(module (import "test" "func->i32" (func (result i32))))
-(module (import "test" "func->f32" (func (result f32))))
-(module (import "test" "func-i32->i32" (func (param i32) (result i32))))
-(module (import "test" "func-i64->i64" (func (param i64) (result i64))))
-
-(assert_unlinkable
-  (module (import "test" "unknown" (func)))
-  "unknown import"
-)
-(assert_unlinkable
-  (module (import "spectest" "unknown" (func)))
-  "unknown import"
-)
-
-(assert_unlinkable
-  (module (import "test" "func" (func (param i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func" (func (result i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func" (func (param i32) (result i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32" (func)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32" (func (result i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32" (func (param f32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32" (func (param i64))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32" (func (param i32) (result i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func->i32" (func)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func->i32" (func (param i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func->i32" (func (result f32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func->i32" (func (result i64))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func->i32" (func (param i32) (result i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32->i32" (func)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32->i32" (func (param i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "func-i32->i32" (func (result i32))))
-  "incompatible import type"
-)
-
-(assert_unlinkable
-  (module (import "test" "global-i32" (func (result i32))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "table-10-inf" (func)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "memory-2-inf" (func)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "global_i32" (func)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "table" (func)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "memory" (func)))
-  "incompatible import type"
-)
-
-
-;; Globals
-
-(module
-  (import "spectest" "global_i32" (global i32))
-  (global (import "spectest" "global_i32") i32)
-
-  (import "spectest" "global_i32" (global $x i32))
-  (global $y (import "spectest" "global_i32") i32)
-
-  ;; JavaScript can't handle i64 yet.
-  ;; (import "spectest" "global_i64" (global i64))
-  (import "spectest" "global_f32" (global f32))
-  (import "spectest" "global_f64" (global f64))
-
-  (func (export "get-0") (result i32) (global.get 0))
-  (func (export "get-1") (result i32) (global.get 1))
-  (func (export "get-x") (result i32) (global.get $x))
-  (func (export "get-y") (result i32) (global.get $y))
-)
-
-(assert_return (invoke "get-0") (i32.const 666))
-(assert_return (invoke "get-1") (i32.const 666))
-(assert_return (invoke "get-x") (i32.const 666))
-(assert_return (invoke "get-y") (i32.const 666))
-
-(module (import "test" "global-i32" (global i32)))
-(module (import "test" "global-f32" (global f32)))
-
-(assert_unlinkable
-  (module (import "test" "unknown" (global i32)))
-  "unknown import"
-)
-(assert_unlinkable
-  (module (import "spectest" "unknown" (global i32)))
-  "unknown import"
-)
-
-(assert_unlinkable
-  (module (import "test" "func" (global i32)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "table-10-inf" (global i32)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "memory-2-inf" (global i32)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "print_i32" (global i32)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "table" (global i32)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "memory" (global i32)))
-  "incompatible import type"
-)
-
-
-;; Tables
-
-(module
-  (type (func (result i32)))
-  (import "spectest" "table" (table 10 20 funcref))
-  (elem 0 (i32.const 1) $f $g)
-
-  (func (export "call") (param i32) (result i32)
-    (call_indirect (type 0) (local.get 0))
-  )
-  (func $f (result i32) (i32.const 11))
-  (func $g (result i32) (i32.const 22))
-)
-
-(assert_trap (invoke "call" (i32.const 0)) "uninitialized element")
-(assert_return (invoke "call" (i32.const 1)) (i32.const 11))
-(assert_return (invoke "call" (i32.const 2)) (i32.const 22))
-(assert_trap (invoke "call" (i32.const 3)) "uninitialized element")
-(assert_trap (invoke "call" (i32.const 100)) "undefined element")
-
-
-(module
-  (type (func (result i32)))
-  (table (import "spectest" "table") 10 20 funcref)
-  (elem 0 (i32.const 1) $f $g)
-
-  (func (export "call") (param i32) (result i32)
-    (call_indirect (type 0) (local.get 0))
-  )
-  (func $f (result i32) (i32.const 11))
-  (func $g (result i32) (i32.const 22))
-)
-
-(assert_trap (invoke "call" (i32.const 0)) "uninitialized element")
-(assert_return (invoke "call" (i32.const 1)) (i32.const 11))
-(assert_return (invoke "call" (i32.const 2)) (i32.const 22))
-(assert_trap (invoke "call" (i32.const 3)) "uninitialized element")
-(assert_trap (invoke "call" (i32.const 100)) "undefined element")
-
-
-(assert_invalid
-  (module (import "" "" (table 10 funcref)) (import "" "" (table 10 funcref)))
-  "multiple tables"
-)
-(assert_invalid
-  (module (import "" "" (table 10 funcref)) (table 10 funcref))
-  "multiple tables"
-)
-(assert_invalid
-  (module (table 10 funcref) (table 10 funcref))
-  "multiple tables"
-)
-
-(module (import "test" "table-10-inf" (table 10 funcref)))
-(module (import "test" "table-10-inf" (table 5 funcref)))
-(module (import "test" "table-10-inf" (table 0 funcref)))
-(module (import "spectest" "table" (table 10 funcref)))
-(module (import "spectest" "table" (table 5 funcref)))
-(module (import "spectest" "table" (table 0 funcref)))
-(module (import "spectest" "table" (table 10 20 funcref)))
-(module (import "spectest" "table" (table 5 20 funcref)))
-(module (import "spectest" "table" (table 0 20 funcref)))
-(module (import "spectest" "table" (table 10 25 funcref)))
-(module (import "spectest" "table" (table 5 25 funcref)))
-
-(assert_unlinkable
-  (module (import "test" "unknown" (table 10 funcref)))
-  "unknown import"
-)
-(assert_unlinkable
-  (module (import "spectest" "unknown" (table 10 funcref)))
-  "unknown import"
-)
-
-(assert_unlinkable
-  (module (import "test" "table-10-inf" (table 12 funcref)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "table-10-inf" (table 10 20 funcref)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "table" (table 12 funcref)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "table" (table 10 15 funcref)))
-  "incompatible import type"
-)
-
-(assert_unlinkable
-  (module (import "test" "func" (table 10 funcref)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "global-i32" (table 10 funcref)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "memory-2-inf" (table 10 funcref)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "print_i32" (table 10 funcref)))
-  "incompatible import type"
-)
-
-
-
-;; Memories
-
-(module
-  (import "spectest" "memory" (memory 1 2))
-  (data 0 (i32.const 10) "\10")
-
-  (func (export "load") (param i32) (result i32) (i32.load (local.get 0)))
-)
-
-(assert_return (invoke "load" (i32.const 0)) (i32.const 0))
-(assert_return (invoke "load" (i32.const 10)) (i32.const 16))
-(assert_return (invoke "load" (i32.const 8)) (i32.const 0x100000))
-(assert_trap (invoke "load" (i32.const 1000000)) "out of bounds memory access")
-
-(module
-  (memory (import "spectest" "memory") 1 2)
-  (data 0 (i32.const 10) "\10")
-
-  (func (export "load") (param i32) (result i32) (i32.load (local.get 0)))
-)
-(assert_return (invoke "load" (i32.const 0)) (i32.const 0))
-(assert_return (invoke "load" (i32.const 10)) (i32.const 16))
-(assert_return (invoke "load" (i32.const 8)) (i32.const 0x100000))
-(assert_trap (invoke "load" (i32.const 1000000)) "out of bounds memory access")
-
-(assert_invalid
-  (module (import "" "" (memory 1)) (import "" "" (memory 1)))
-  "multiple memories"
-)
-(assert_invalid
-  (module (import "" "" (memory 1)) (memory 0))
-  "multiple memories"
-)
-(assert_invalid
-  (module (memory 0) (memory 0))
-  "multiple memories"
-)
-
-(module (import "test" "memory-2-inf" (memory 2)))
-(module (import "test" "memory-2-inf" (memory 1)))
-(module (import "test" "memory-2-inf" (memory 0)))
-(module (import "spectest" "memory" (memory 1)))
-(module (import "spectest" "memory" (memory 0)))
-(module (import "spectest" "memory" (memory 1 2)))
-(module (import "spectest" "memory" (memory 0 2)))
-(module (import "spectest" "memory" (memory 1 3)))
-(module (import "spectest" "memory" (memory 0 3)))
-
-(assert_unlinkable
-  (module (import "test" "unknown" (memory 1)))
-  "unknown import"
-)
-(assert_unlinkable
-  (module (import "spectest" "unknown" (memory 1)))
-  "unknown import"
-)
-
-(assert_unlinkable
-  (module (import "test" "memory-2-inf" (memory 3)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "memory-2-inf" (memory 2 3)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "memory" (memory 2)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "memory" (memory 1 1)))
-  "incompatible import type"
-)
-
-(assert_unlinkable
-  (module (import "test" "func-i32" (memory 1)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "global-i32" (memory 1)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "test" "table-10-inf" (memory 1)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "print_i32" (memory 1)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "global_i32" (memory 1)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "table" (memory 1)))
-  "incompatible import type"
-)
-
-(assert_unlinkable
-  (module (import "spectest" "memory" (memory 2)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "spectest" "memory" (memory 1 1)))
-  "incompatible import type"
-)
-
-(module
-  (import "spectest" "memory" (memory 0 3))  ;; actual has max size 2
-  (func (export "grow") (param i32) (result i32) (memory.grow (local.get 0)))
-)
-(assert_return (invoke "grow" (i32.const 0)) (i32.const 1))
-(assert_return (invoke "grow" (i32.const 1)) (i32.const 1))
-(assert_return (invoke "grow" (i32.const 0)) (i32.const 2))
-(assert_return (invoke "grow" (i32.const 1)) (i32.const -1))
-(assert_return (invoke "grow" (i32.const 0)) (i32.const 2))
-
-
-;; Syntax errors
-
-(assert_malformed
-  (module quote "(func) (import \"\" \"\" (func))")
-  "import after function"
-)
-(assert_malformed
-  (module quote "(func) (import \"\" \"\" (global i64))")
-  "import after function"
-)
-(assert_malformed
-  (module quote "(func) (import \"\" \"\" (table 0 funcref))")
-  "import after function"
-)
-(assert_malformed
-  (module quote "(func) (import \"\" \"\" (memory 0))")
-  "import after function"
-)
-
-(assert_malformed
-  (module quote "(global i64 (i64.const 0)) (import \"\" \"\" (func))")
-  "import after global"
-)
-(assert_malformed
-  (module quote "(global i64 (i64.const 0)) (import \"\" \"\" (global f32))")
-  "import after global"
-)
-(assert_malformed
-  (module quote "(global i64 (i64.const 0)) (import \"\" \"\" (table 0 funcref))")
-  "import after global"
-)
-(assert_malformed
-  (module quote "(global i64 (i64.const 0)) (import \"\" \"\" (memory 0))")
-  "import after global"
-)
-
-(assert_malformed
-  (module quote "(table 0 funcref) (import \"\" \"\" (func))")
-  "import after table"
-)
-(assert_malformed
-  (module quote "(table 0 funcref) (import \"\" \"\" (global i32))")
-  "import after table"
-)
-(assert_malformed
-  (module quote "(table 0 funcref) (import \"\" \"\" (table 0 funcref))")
-  "import after table"
-)
-(assert_malformed
-  (module quote "(table 0 funcref) (import \"\" \"\" (memory 0))")
-  "import after table"
-)
-
-(assert_malformed
-  (module quote "(memory 0) (import \"\" \"\" (func))")
-  "import after memory"
-)
-(assert_malformed
-  (module quote "(memory 0) (import \"\" \"\" (global i32))")
-  "import after memory"
-)
-(assert_malformed
-  (module quote "(memory 0) (import \"\" \"\" (table 1 3 funcref))")
-  "import after memory"
-)
-(assert_malformed
-  (module quote "(memory 0) (import \"\" \"\" (memory 1 2))")
-  "import after memory"
-)
-
-;; This module is required to validate, regardless of whether it can be
-;; linked. Overloading is not possible in wasm itself, but it is possible
-;; in modules from which wasm can import.
-(module)
-(register "not wasm")
-(assert_unlinkable
-  (module
-    (import "not wasm" "overloaded" (func))
-    (import "not wasm" "overloaded" (func (param i32)))
-    (import "not wasm" "overloaded" (func (param i32 i32)))
-    (import "not wasm" "overloaded" (func (param i64)))
-    (import "not wasm" "overloaded" (func (param f32)))
-    (import "not wasm" "overloaded" (func (param f64)))
-    (import "not wasm" "overloaded" (func (result i32)))
-    (import "not wasm" "overloaded" (func (result i64)))
-    (import "not wasm" "overloaded" (func (result f32)))
-    (import "not wasm" "overloaded" (func (result f64)))
-    (import "not wasm" "overloaded" (global i32))
-    (import "not wasm" "overloaded" (global i64))
-    (import "not wasm" "overloaded" (global f32))
-    (import "not wasm" "overloaded" (global f64))
-    (import "not wasm" "overloaded" (table 0 funcref))
-    (import "not wasm" "overloaded" (memory 0))
-  )
-  "unknown import"
-)
diff --git a/test/core/inline-module.wast b/test/core/inline-module.wast
deleted file mode 100644
index dc7ead77..00000000
--- a/test/core/inline-module.wast
+++ /dev/null
@@ -1 +0,0 @@
-(func) (memory 0) (func (export "f"))
diff --git a/test/core/linking.wast b/test/core/linking.wast
deleted file mode 100644
index 6868e8b7..00000000
--- a/test/core/linking.wast
+++ /dev/null
@@ -1,388 +0,0 @@
-;; Functions
-
-(module $Mf
-  (func (export "call") (result i32) (call $g))
-  (func $g (result i32) (i32.const 2))
-)
-(register "Mf" $Mf)
-
-(module $Nf
-  (func $f (import "Mf" "call") (result i32))
-  (export "Mf.call" (func $f))
-  (func (export "call Mf.call") (result i32) (call $f))
-  (func (export "call") (result i32) (call $g))
-  (func $g (result i32) (i32.const 3))
-)
-
-(assert_return (invoke $Mf "call") (i32.const 2))
-(assert_return (invoke $Nf "Mf.call") (i32.const 2))
-(assert_return (invoke $Nf "call") (i32.const 3))
-(assert_return (invoke $Nf "call Mf.call") (i32.const 2))
-
-(module
-  (import "spectest" "print_i32" (func $f (param i32)))
-  (export "print" (func $f))
-)
-(register "reexport_f")
-(assert_unlinkable
-  (module (import "reexport_f" "print" (func (param i64))))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "reexport_f" "print" (func (param i32) (result i32))))
-  "incompatible import type"
-)
-
-
-;; Globals
-
-(module $Mg
-  (global $glob (export "glob") i32 (i32.const 42))
-  (func (export "get") (result i32) (global.get $glob))
-
-  ;; export mutable globals
-  (global $mut_glob (export "mut_glob") (mut i32) (i32.const 142))
-  (func (export "get_mut") (result i32) (global.get $mut_glob))
-  (func (export "set_mut") (param i32) (global.set $mut_glob (local.get 0)))
-)
-(register "Mg" $Mg)
-
-(module $Ng
-  (global $x (import "Mg" "glob") i32)
-  (global $mut_glob (import "Mg" "mut_glob") (mut i32))
-  (func $f (import "Mg" "get") (result i32))
-  (func $get_mut (import "Mg" "get_mut") (result i32))
-  (func $set_mut (import "Mg" "set_mut") (param i32))
-
-  (export "Mg.glob" (global $x))
-  (export "Mg.get" (func $f))
-  (global $glob (export "glob") i32 (i32.const 43))
-  (func (export "get") (result i32) (global.get $glob))
-
-  (export "Mg.mut_glob" (global $mut_glob))
-  (export "Mg.get_mut" (func $get_mut))
-  (export "Mg.set_mut" (func $set_mut))
-)
-
-(assert_return (get $Mg "glob") (i32.const 42))
-(assert_return (get $Ng "Mg.glob") (i32.const 42))
-(assert_return (get $Ng "glob") (i32.const 43))
-(assert_return (invoke $Mg "get") (i32.const 42))
-(assert_return (invoke $Ng "Mg.get") (i32.const 42))
-(assert_return (invoke $Ng "get") (i32.const 43))
-
-(assert_return (get $Mg "mut_glob") (i32.const 142))
-(assert_return (get $Ng "Mg.mut_glob") (i32.const 142))
-(assert_return (invoke $Mg "get_mut") (i32.const 142))
-(assert_return (invoke $Ng "Mg.get_mut") (i32.const 142))
-
-(assert_return (invoke $Mg "set_mut" (i32.const 241)))
-(assert_return (get $Mg "mut_glob") (i32.const 241))
-(assert_return (get $Ng "Mg.mut_glob") (i32.const 241))
-(assert_return (invoke $Mg "get_mut") (i32.const 241))
-(assert_return (invoke $Ng "Mg.get_mut") (i32.const 241))
-
-
-(assert_unlinkable
-  (module (import "Mg" "mut_glob" (global i32)))
-  "incompatible import type"
-)
-(assert_unlinkable
-  (module (import "Mg" "glob" (global (mut i32))))
-  "incompatible import type"
-)
-
-;; Tables
-
-(module $Mt
-  (type (func (result i32)))
-  (type (func))
-
-  (table (export "tab") 10 funcref)
-  (elem (i32.const 2) $g $g $g $g)
-  (func $g (result i32) (i32.const 4))
-  (func (export "h") (result i32) (i32.const -4))
-
-  (func (export "call") (param i32) (result i32)
-    (call_indirect (type 0) (local.get 0))
-  )
-)
-(register "Mt" $Mt)
-
-(module $Nt
-  (type (func))
-  (type (func (result i32)))
-
-  (func $f (import "Mt" "call") (param i32) (result i32))
-  (func $h (import "Mt" "h") (result i32))
-
-  (table funcref (elem $g $g $g $h $f))
-  (func $g (result i32) (i32.const 5))
-
-  (export "Mt.call" (func $f))
-  (func (export "call Mt.call") (param i32) (result i32)
-    (call $f (local.get 0))
-  )
-  (func (export "call") (param i32) (result i32)
-    (call_indirect (type 1) (local.get 0))
-  )
-)
-
-(assert_return (invoke $Mt "call" (i32.const 2)) (i32.const 4))
-(assert_return (invoke $Nt "Mt.call" (i32.const 2)) (i32.const 4))
-(assert_return (invoke $Nt "call" (i32.const 2)) (i32.const 5))
-(assert_return (invoke $Nt "call Mt.call" (i32.const 2)) (i32.const 4))
-
-(assert_trap (invoke $Mt "call" (i32.const 1)) "uninitialized")
-(assert_trap (invoke $Nt "Mt.call" (i32.const 1)) "uninitialized")
-(assert_return (invoke $Nt "call" (i32.const 1)) (i32.const 5))
-(assert_trap (invoke $Nt "call Mt.call" (i32.const 1)) "uninitialized")
-
-(assert_trap (invoke $Mt "call" (i32.const 0)) "uninitialized")
-(assert_trap (invoke $Nt "Mt.call" (i32.const 0)) "uninitialized")
-(assert_return (invoke $Nt "call" (i32.const 0)) (i32.const 5))
-(assert_trap (invoke $Nt "call Mt.call" (i32.const 0)) "uninitialized")
-
-(assert_trap (invoke $Mt "call" (i32.const 20)) "undefined")
-(assert_trap (invoke $Nt "Mt.call" (i32.const 20)) "undefined")
-(assert_trap (invoke $Nt "call" (i32.const 7)) "undefined")
-(assert_trap (invoke $Nt "call Mt.call" (i32.const 20)) "undefined")
-
-(assert_return (invoke $Nt "call" (i32.const 3)) (i32.const -4))
-(assert_trap (invoke $Nt "call" (i32.const 4)) "indirect call")
-
-(module $Ot
-  (type (func (result i32)))
-
-  (func $h (import "Mt" "h") (result i32))
-  (table (import "Mt" "tab") 5 funcref)
-  (elem (i32.const 1) $i $h)
-  (func $i (result i32) (i32.const 6))
-
-  (func (export "call") (param i32) (result i32)
-    (call_indirect (type 0) (local.get 0))
-  )
-)
-
-(assert_return (invoke $Mt "call" (i32.const 3)) (i32.const 4))
-(assert_return (invoke $Nt "Mt.call" (i32.const 3)) (i32.const 4))
-(assert_return (invoke $Nt "call Mt.call" (i32.const 3)) (i32.const 4))
-(assert_return (invoke $Ot "call" (i32.const 3)) (i32.const 4))
-
-(assert_return (invoke $Mt "call" (i32.const 2)) (i32.const -4))
-(assert_return (invoke $Nt "Mt.call" (i32.const 2)) (i32.const -4))
-(assert_return (invoke $Nt "call" (i32.const 2)) (i32.const 5))
-(assert_return (invoke $Nt "call Mt.call" (i32.const 2)) (i32.const -4))
-(assert_return (invoke $Ot "call" (i32.const 2)) (i32.const -4))
-
-(assert_return (invoke $Mt "call" (i32.const 1)) (i32.const 6))
-(assert_return (invoke $Nt "Mt.call" (i32.const 1)) (i32.const 6))
-(assert_return (invoke $Nt "call" (i32.const 1)) (i32.const 5))
-(assert_return (invoke $Nt "call Mt.call" (i32.const 1)) (i32.const 6))
-(assert_return (invoke $Ot "call" (i32.const 1)) (i32.const 6))
-
-(assert_trap (invoke $Mt "call" (i32.const 0)) "uninitialized")
-(assert_trap (invoke $Nt "Mt.call" (i32.const 0)) "uninitialized")
-(assert_return (invoke $Nt "call" (i32.const 0)) (i32.const 5))
-(assert_trap (invoke $Nt "call Mt.call" (i32.const 0)) "uninitialized")
-(assert_trap (invoke $Ot "call" (i32.const 0)) "uninitialized")
-
-(assert_trap (invoke $Ot "call" (i32.const 20)) "undefined")
-
-(module
-  (table (import "Mt" "tab") 0 funcref)
-  (elem (i32.const 9) $f)
-  (func $f)
-)
-
-(module $G1 (global (export "g") i32 (i32.const 5)))
-(register "G1" $G1)
-(module $G2
-  (global (import "G1" "g") i32)
-  (global (export "g") i32 (global.get 0))
-)
-(assert_return (get $G2 "g") (i32.const 5))
-
-(assert_unlinkable
-  (module
-    (table (import "Mt" "tab") 0 funcref)
-    (elem (i32.const 10) $f)
-    (func $f)
-  )
-  "elements segment does not fit"
-)
-
-(assert_unlinkable
-  (module
-    (table (import "Mt" "tab") 10 funcref)
-    (memory (import "Mt" "mem") 1)  ;; does not exist
-    (func $f (result i32) (i32.const 0))
-    (elem (i32.const 7) $f)
-    (elem (i32.const 9) $f)
-  )
-  "unknown import"
-)
-(assert_trap (invoke $Mt "call" (i32.const 7)) "uninitialized")
-
-(assert_unlinkable
-  (module
-    (table (import "Mt" "tab") 10 funcref)
-    (func $f (result i32) (i32.const 0))
-    (elem (i32.const 7) $f)
-    (elem (i32.const 12) $f)  ;; out of bounds
-  )
-  "elements segment does not fit"
-)
-(assert_trap (invoke $Mt "call" (i32.const 7)) "uninitialized")
-
-(assert_unlinkable
-  (module
-    (table (import "Mt" "tab") 10 funcref)
-    (func $f (result i32) (i32.const 0))
-    (elem (i32.const 7) $f)
-    (memory 1)
-    (data (i32.const 0x10000) "d") ;; out of bounds
-  )
-  "data segment does not fit"
-)
-(assert_trap (invoke $Mt "call" (i32.const 7)) "uninitialized")
-
-
-;; Memories
-
-(module $Mm
-  (memory (export "mem") 1 5)
-  (data (i32.const 10) "\00\01\02\03\04\05\06\07\08\09")
-
-  (func (export "load") (param $a i32) (result i32)
-    (i32.load8_u (local.get 0))
-  )
-)
-(register "Mm" $Mm)
-
-(module $Nm
-  (func $loadM (import "Mm" "load") (param i32) (result i32))
-
-  (memory 1)
-  (data (i32.const 10) "\f0\f1\f2\f3\f4\f5")
-
-  (export "Mm.load" (func $loadM))
-  (func (export "load") (param $a i32) (result i32)
-    (i32.load8_u (local.get 0))
-  )
-)
-
-(assert_return (invoke $Mm "load" (i32.const 12)) (i32.const 2))
-(assert_return (invoke $Nm "Mm.load" (i32.const 12)) (i32.const 2))
-(assert_return (invoke $Nm "load" (i32.const 12)) (i32.const 0xf2))
-
-(module $Om
-  (memory (import "Mm" "mem") 1)
-  (data (i32.const 5) "\a0\a1\a2\a3\a4\a5\a6\a7")
-
-  (func (export "load") (param $a i32) (result i32)
-    (i32.load8_u (local.get 0))
-  )
-)
-
-(assert_return (invoke $Mm "load" (i32.const 12)) (i32.const 0xa7))
-(assert_return (invoke $Nm "Mm.load" (i32.const 12)) (i32.const 0xa7))
-(assert_return (invoke $Nm "load" (i32.const 12)) (i32.const 0xf2))
-(assert_return (invoke $Om "load" (i32.const 12)) (i32.const 0xa7))
-
-(module
-  (memory (import "Mm" "mem") 0)
-  (data (i32.const 0xffff) "a")
-)
-
-(assert_unlinkable
-  (module
-    (memory (import "Mm" "mem") 0)
-    (data (i32.const 0x10000) "a")
-  )
-  "data segment does not fit"
-)
-
-(module $Pm
-  (memory (import "Mm" "mem") 1 8)
-
-  (func (export "grow") (param $a i32) (result i32)
-    (memory.grow (local.get 0))
-  )
-)
-
-(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 1))
-(assert_return (invoke $Pm "grow" (i32.const 2)) (i32.const 1))
-(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 3))
-(assert_return (invoke $Pm "grow" (i32.const 1)) (i32.const 3))
-(assert_return (invoke $Pm "grow" (i32.const 1)) (i32.const 4))
-(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 5))
-(assert_return (invoke $Pm "grow" (i32.const 1)) (i32.const -1))
-(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 5))
-
-(assert_unlinkable
-  (module
-    (func $host (import "spectest" "print"))
-    (memory (import "Mm" "mem") 1)
-    (table (import "Mm" "tab") 0 funcref)  ;; does not exist
-    (data (i32.const 0) "abc")
-  )
-  "unknown import"
-)
-(assert_return (invoke $Mm "load" (i32.const 0)) (i32.const 0))
-
-(assert_unlinkable
-  (module
-    (memory (import "Mm" "mem") 1)
-    (data (i32.const 0) "abc")
-    (data (i32.const 0x50000) "d") ;; out of bounds
-  )
-  "data segment does not fit"
-)
-(assert_return (invoke $Mm "load" (i32.const 0)) (i32.const 0))
-
-(assert_unlinkable
-  (module
-    (memory (import "Mm" "mem") 1)
-    (data (i32.const 0) "abc")
-    (table 0 funcref)
-    (func)
-    (elem (i32.const 0) 0) ;; out of bounds
-  )
-  "elements segment does not fit"
-)
-(assert_return (invoke $Mm "load" (i32.const 0)) (i32.const 0))
-
-;; Store is modified if the start function traps.
-(module $Ms
-  (type $t (func (result i32)))
-  (memory (export "memory") 1)
-  (table (export "table") 1 funcref)
-  (func (export "get memory[0]") (type $t)
-    (i32.load8_u (i32.const 0))
-  )
-  (func (export "get table[0]") (type $t)
-    (call_indirect (type $t) (i32.const 0))
-  )
-)
-(register "Ms" $Ms)
-
-(assert_trap
-  (module
-    (import "Ms" "memory" (memory 1))
-    (import "Ms" "table" (table 1 funcref))
-    (data (i32.const 0) "hello")
-    (elem (i32.const 0) $f)
-    (func $f (result i32)
-      (i32.const 0xdead)
-    )
-    (func $main
-      (unreachable)
-    )
-    (start $main)
-  )
-  "unreachable"
-)
-
-(assert_return (invoke $Ms "get memory[0]") (i32.const 104))  ;; 'h'
-(assert_return (invoke $Ms "get table[0]") (i32.const 0xdead))
