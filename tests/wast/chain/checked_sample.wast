(module
  (type (func (param i32)))
  ;; add print_i32 import here is to test allow checked imports import after other
  (func $print_i32 (import "spectest" "print_i32") (type 0))
  (import "env" "checked_i8_add" (func $i8_add (param i32 i32) (result i32)))
  (import "env" "checked_u8_add" (func $u8_add (param i32 i32) (result i32)))
  (import "env" "checked_i8_sub" (func $i8_sub (param i32 i32) (result i32)))
  (import "env" "checked_u8_sub" (func $u8_sub (param i32 i32) (result i32)))
  (import "env" "checked_i8_mul" (func $i8_mul (param i32 i32) (result i32)))
  (import "env" "checked_u8_mul" (func $u8_mul (param i32 i32) (result i32)))
  (import "env" "checked_i16_add" (func $i16_add (param i32 i32) (result i32)))
  (import "env" "checked_u16_add" (func $u16_add (param i32 i32) (result i32)))
  (import "env" "checked_i16_sub" (func $i16_sub (param i32 i32) (result i32)))
  (import "env" "checked_u16_sub" (func $u16_sub (param i32 i32) (result i32)))
  (import "env" "checked_i16_mul" (func $i16_mul (param i32 i32) (result i32)))
  (import "env" "checked_u16_mul" (func $u16_mul (param i32 i32) (result i32)))
  (import "env" "checked_i32_add" (func $i32_add (param i32 i32) (result i32)))
  (import "env" "checked_u32_add" (func $u32_add (param i32 i32) (result i32)))
  (import "env" "checked_i32_sub" (func $i32_sub (param i32 i32) (result i32)))
  (import "env" "checked_u32_sub" (func $u32_sub (param i32 i32) (result i32)))
  (import "env" "checked_i32_mul" (func $i32_mul (param i32 i32) (result i32)))
  (import "env" "checked_u32_mul" (func $u32_mul (param i32 i32) (result i32)))
  (import "env" "checked_i64_add" (func $i64_add (param i64 i64) (result i64)))
  (import "env" "checked_u64_add" (func $u64_add (param i64 i64) (result i64)))
  (import "env" "checked_i64_sub" (func $i64_sub (param i64 i64) (result i64)))
  (import "env" "checked_u64_sub" (func $u64_sub (param i64 i64) (result i64)))
  (import "env" "checked_i64_mul" (func $i64_mul (param i64 i64) (result i64)))
  (import "env" "checked_u64_mul" (func $u64_mul (param i64 i64) (result i64)))
  (import "env" "checked_i128_add" (func $i128_add (param i64 i64 i64 i64) (result i64)))
  (import "env" "checked_u128_add" (func $u128_add (param i64 i64 i64 i64) (result i64)))
  (import "env" "checked_i128_sub" (func $i128_sub (param i64 i64 i64 i64) (result i64)))
  (import "env" "checked_u128_sub" (func $u128_sub (param i64 i64 i64 i64) (result i64)))
  (func (export "i8_add") (param $x i32) (param $y i32) (result i32) (call $i8_add (local.get $x) (local.get $y)))
  (func (export "u8_add") (param $x i32) (param $y i32) (result i32) (call $u8_add (local.get $x) (local.get $y)))
  (func (export "i8_sub") (param $x i32) (param $y i32) (result i32) (call $i8_sub (local.get $x) (local.get $y)))
  (func (export "u8_sub") (param $x i32) (param $y i32) (result i32) (call $u8_sub (local.get $x) (local.get $y)))
  (func (export "i8_mul") (param $x i32) (param $y i32) (result i32) (call $i8_mul (local.get $x) (local.get $y)))
  (func (export "u8_mul") (param $x i32) (param $y i32) (result i32) (call $u8_mul (local.get $x) (local.get $y)))
  (func (export "i16_add") (param $x i32) (param $y i32) (result i32) (call $i16_add (local.get $x) (local.get $y)))
  (func (export "u16_add") (param $x i32) (param $y i32) (result i32) (call $u16_add (local.get $x) (local.get $y)))
  (func (export "i16_sub") (param $x i32) (param $y i32) (result i32) (call $i16_sub (local.get $x) (local.get $y)))
  (func (export "u16_sub") (param $x i32) (param $y i32) (result i32) (call $u16_sub (local.get $x) (local.get $y)))
  (func (export "i16_mul") (param $x i32) (param $y i32) (result i32) (call $i16_mul (local.get $x) (local.get $y)))
  (func (export "u16_mul") (param $x i32) (param $y i32) (result i32) (call $u16_mul (local.get $x) (local.get $y)))
  (func (export "i32_add") (param $x i32) (param $y i32) (result i32) (call $i32_add (local.get $x) (local.get $y)))
  (func (export "u32_add") (param $x i32) (param $y i32) (result i32) (call $u32_add (local.get $x) (local.get $y)))
  (func (export "i32_sub") (param $x i32) (param $y i32) (result i32) (call $i32_sub (local.get $x) (local.get $y)))
  (func (export "u32_sub") (param $x i32) (param $y i32) (result i32) (call $u32_sub (local.get $x) (local.get $y)))
  (func (export "i32_mul") (param $x i32) (param $y i32) (result i32) (call $i32_mul (local.get $x) (local.get $y)))
  (func (export "u32_mul") (param $x i32) (param $y i32) (result i32) (call $u32_mul (local.get $x) (local.get $y)))
  (func (export "i64_add") (param $x i64) (param $y i64) (result i64) (call $i64_add (local.get $x) (local.get $y)))
  (func (export "u64_add") (param $x i64) (param $y i64) (result i64) (call $u64_add (local.get $x) (local.get $y)))
  (func (export "i64_sub") (param $x i64) (param $y i64) (result i64) (call $i64_sub (local.get $x) (local.get $y)))
  (func (export "u64_sub") (param $x i64) (param $y i64) (result i64) (call $u64_sub (local.get $x) (local.get $y)))
  (func (export "i64_mul") (param $x i64) (param $y i64) (result i64) (call $i64_mul (local.get $x) (local.get $y)))
  (func (export "u64_mul") (param $x i64) (param $y i64) (result i64) (call $u64_mul (local.get $x) (local.get $y)))
  (func (export "i128_add") (param i64 i64 i64 i64) (result i64) (call $i128_add (local.get 0) (local.get 1) (local.get 2) (local.get 3)))
  (func (export "u128_add") (param i64 i64 i64 i64) (result i64) (call $u128_add (local.get 0) (local.get 1) (local.get 2) (local.get 3)))
  (func (export "i128_sub") (param i64 i64 i64 i64) (result i64) (call $i128_sub (local.get 0) (local.get 1) (local.get 2) (local.get 3)))
  (func (export "u128_sub") (param i64 i64 i64 i64) (result i64) (call $u128_sub (local.get 0) (local.get 1) (local.get 2) (local.get 3)))
)

(assert_return (invoke "i8_add" (i32.const 1) (i32.const 1)) (i32.const 2))
(assert_return (invoke "i8_add" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "i8_add" (i32.const -1) (i32.const -1)) (i32.const -2))
(assert_return (invoke "i8_add" (i32.const -1) (i32.const 1)) (i32.const 0))
(assert_trap (invoke "i8_add" (i32.const 0x7f) (i32.const 1)) "integer overflow")
(assert_trap (invoke "i8_add" (i32.const 0x80) (i32.const -1)) "integer overflow")
(assert_trap (invoke "i8_add" (i32.const 0x80) (i32.const 0x80)) "integer overflow")
(assert_return (invoke "i8_add" (i32.const 0x3f) (i32.const 1)) (i32.const 0x40))

(assert_return (invoke "u8_add" (i32.const 1) (i32.const 1)) (i32.const 2))
(assert_return (invoke "u8_add" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_trap (invoke "u8_add" (i32.const -1) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u8_add" (i32.const -1) (i32.const 1)) "integer overflow")
(assert_return (invoke "u8_add" (i32.const 0x7f) (i32.const 1)) (i32.const 0x80))
(assert_trap (invoke "u8_add" (i32.const 0x80) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u8_add" (i32.const 0x80) (i32.const 0x80)) "integer overflow")
(assert_return (invoke "u8_add" (i32.const 0x3f) (i32.const 1)) (i32.const 0x40))

(assert_return (invoke "i8_sub" (i32.const 1) (i32.const 1)) (i32.const 0))
(assert_return (invoke "i8_sub" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "i8_sub" (i32.const -1) (i32.const -1)) (i32.const 0))
(assert_trap (invoke "i8_sub" (i32.const 0x7f) (i32.const -1)) "integer overflow")
(assert_trap (invoke "i8_sub" (i32.const 0x80) (i32.const 1)) "integer overflow")
(assert_return (invoke "i8_sub" (i32.const 0x80) (i32.const 0x80)) (i32.const 0))
(assert_return (invoke "i8_sub" (i32.const 0x3f) (i32.const -1)) (i32.const 0x40))

(assert_return (invoke "u8_sub" (i32.const 1) (i32.const 1)) (i32.const 0))
(assert_return (invoke "u8_sub" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "u8_sub" (i32.const -1) (i32.const -1)) (i32.const 0))
(assert_trap (invoke "u8_sub" (i32.const 0x7f) (i32.const -1)) "integer overflow")
(assert_return (invoke "u8_sub" (i32.const 0x80) (i32.const 1)) (i32.const 0x7f))
(assert_return (invoke "u8_sub" (i32.const 0x80) (i32.const 0x80)) (i32.const 0))
(assert_trap (invoke "u8_sub" (i32.const 0x3f) (i32.const -1)) "integer overflow")

(assert_return (invoke "i8_mul" (i32.const 1) (i32.const 1)) (i32.const 1))
(assert_return (invoke "i8_mul" (i32.const 1) (i32.const 0)) (i32.const 0))
(assert_return (invoke "i8_mul" (i32.const -1) (i32.const -1)) (i32.const 1))
(assert_trap (invoke "i8_mul" (i32.const 0x10) (i32.const 64)) "integer overflow")
(assert_return (invoke "i8_mul" (i32.const 0x80) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "i8_mul" (i32.const 0x80) (i32.const -1)) "integer overflow")
(assert_return (invoke "i8_mul" (i32.const 0x7f) (i32.const -1)) (i32.const 0xffffff81))
(assert_trap (invoke "i8_mul" (i32.const 0x67) (i32.const 0x10)) "integer overflow")
(assert_trap (invoke "i8_mul" (i32.const 0x7f) (i32.const 0x7f)) "integer overflow")

(assert_return (invoke "u8_mul" (i32.const 1) (i32.const 1)) (i32.const 1))
(assert_return (invoke "u8_mul" (i32.const 1) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "u8_mul" (i32.const -1) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u8_mul" (i32.const 0x10) (i32.const 64)) "integer overflow")
(assert_return (invoke "u8_mul" (i32.const 0x80) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "u8_mul" (i32.const 0x80) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u8_mul" (i32.const 0x7f) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u8_mul" (i32.const 0x67) (i32.const 0x10)) "integer overflow")
(assert_trap (invoke "u8_mul" (i32.const 0x7f) (i32.const 0x7f)) "integer overflow")

(assert_return (invoke "i16_add" (i32.const 1) (i32.const 1)) (i32.const 2))
(assert_return (invoke "i16_add" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "i16_add" (i32.const -1) (i32.const -1)) (i32.const -2))
(assert_return (invoke "i16_add" (i32.const -1) (i32.const 1)) (i32.const 0))
(assert_trap (invoke "i16_add" (i32.const 0x7fff) (i32.const 1)) "integer overflow")
(assert_trap (invoke "i16_add" (i32.const 0x8000) (i32.const -1)) "integer overflow")
(assert_trap (invoke "i16_add" (i32.const 0x8000) (i32.const 0x8000)) "integer overflow")
(assert_return (invoke "i16_add" (i32.const 0x3fff) (i32.const 1)) (i32.const 0x4000))

(assert_return (invoke "u16_add" (i32.const 1) (i32.const 1)) (i32.const 2))
(assert_return (invoke "u16_add" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_trap (invoke "u16_add" (i32.const -1) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u16_add" (i32.const -1) (i32.const 1)) "integer overflow")
(assert_return (invoke "u16_add" (i32.const 0x7fff) (i32.const 1)) (i32.const 0x8000))
(assert_trap (invoke "u16_add" (i32.const 0x8000) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u16_add" (i32.const 0x8000) (i32.const 0x8000)) "integer overflow")
(assert_return (invoke "u16_add" (i32.const 0x3fff) (i32.const 1)) (i32.const 0x4000))

(assert_return (invoke "i16_sub" (i32.const 1) (i32.const 1)) (i32.const 0))
(assert_return (invoke "i16_sub" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "i16_sub" (i32.const -1) (i32.const -1)) (i32.const 0))
(assert_trap (invoke "i16_sub" (i32.const 0x7fff) (i32.const -1)) "integer overflow")
(assert_trap (invoke "i16_sub" (i32.const 0x8000) (i32.const 1)) "integer overflow")
(assert_return (invoke "i16_sub" (i32.const 0x8000) (i32.const 0x8000)) (i32.const 0))
(assert_return (invoke "i16_sub" (i32.const 0x3fff) (i32.const -1)) (i32.const 0x4000))

(assert_return (invoke "u16_sub" (i32.const 1) (i32.const 1)) (i32.const 0))
(assert_return (invoke "u16_sub" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "u16_sub" (i32.const -1) (i32.const -1)) (i32.const 0))
(assert_trap (invoke "u16_sub" (i32.const 0x7fff) (i32.const -1)) "integer overflow")
(assert_return (invoke "u16_sub" (i32.const 0x8000) (i32.const 1)) (i32.const 0x7fff))
(assert_return (invoke "u16_sub" (i32.const 0x8000) (i32.const 0x8000)) (i32.const 0))
(assert_trap (invoke "u16_sub" (i32.const 0x3fff) (i32.const -1)) "integer overflow")

(assert_return (invoke "i16_mul" (i32.const 1) (i32.const 1)) (i32.const 1))
(assert_return (invoke "i16_mul" (i32.const 1) (i32.const 0)) (i32.const 0))
(assert_return (invoke "i16_mul" (i32.const -1) (i32.const -1)) (i32.const 1))
(assert_trap (invoke "i16_mul" (i32.const 0x1000) (i32.const 4096)) "integer overflow")
(assert_return (invoke "i16_mul" (i32.const 0x8000) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "i16_mul" (i32.const 0x8000) (i32.const -1)) "integer overflow")
(assert_return (invoke "i16_mul" (i32.const 0x7fff) (i32.const -1)) (i32.const 0xffff8001))
(assert_trap (invoke "i16_mul" (i32.const 0x4567) (i32.const 0x3210)) "integer overflow")
(assert_trap (invoke "i16_mul" (i32.const 0x7fff) (i32.const 0x7fff)) "integer overflow")

(assert_return (invoke "u16_mul" (i32.const 1) (i32.const 1)) (i32.const 1))
(assert_return (invoke "u16_mul" (i32.const 1) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "u16_mul" (i32.const -1) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u16_mul" (i32.const 0x1000) (i32.const 4096)) "integer overflow")
(assert_return (invoke "u16_mul" (i32.const 0x8000) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "u16_mul" (i32.const 0x8000) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u16_mul" (i32.const 0x7fff) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u16_mul" (i32.const 0x4567) (i32.const 0x3210)) "integer overflow")
(assert_trap (invoke "u16_mul" (i32.const 0x7fff) (i32.const 0x7fff)) "integer overflow")

(assert_return (invoke "i32_add" (i32.const 1) (i32.const 1)) (i32.const 2))
(assert_return (invoke "i32_add" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "i32_add" (i32.const -1) (i32.const -1)) (i32.const -2))
(assert_return (invoke "i32_add" (i32.const -1) (i32.const 1)) (i32.const 0))
(assert_trap (invoke "i32_add" (i32.const 0x7fffffff) (i32.const 1)) "integer overflow")
(assert_trap (invoke "i32_add" (i32.const 0x80000000) (i32.const -1)) "integer overflow")
(assert_trap (invoke "i32_add" (i32.const 0x80000000) (i32.const 0x80000000)) "integer overflow")
(assert_return (invoke "i32_add" (i32.const 0x3fffffff) (i32.const 1)) (i32.const 0x40000000))

(assert_return (invoke "u32_add" (i32.const 1) (i32.const 1)) (i32.const 2))
(assert_return (invoke "u32_add" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_trap (invoke "u32_add" (i32.const -1) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u32_add" (i32.const -1) (i32.const 1)) "integer overflow")
(assert_return (invoke "u32_add" (i32.const 0x7fffffff) (i32.const 1)) (i32.const 0x80000000))
(assert_trap (invoke "u32_add" (i32.const 0x80000000) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u32_add" (i32.const 0x80000000) (i32.const 0x80000000)) "integer overflow")
(assert_return (invoke "u32_add" (i32.const 0x3fffffff) (i32.const 1)) (i32.const 0x40000000))

(assert_return (invoke "i32_sub" (i32.const 1) (i32.const 1)) (i32.const 0))
(assert_return (invoke "i32_sub" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "i32_sub" (i32.const -1) (i32.const -1)) (i32.const 0))
(assert_trap (invoke "i32_sub" (i32.const 0x7fffffff) (i32.const -1)) "integer overflow")
(assert_trap (invoke "i32_sub" (i32.const 0x80000000) (i32.const 1)) "integer overflow")
(assert_return (invoke "i32_sub" (i32.const 0x80000000) (i32.const 0x80000000)) (i32.const 0))
(assert_return (invoke "i32_sub" (i32.const 0x3fffffff) (i32.const -1)) (i32.const 0x40000000))

(assert_return (invoke "u32_sub" (i32.const 1) (i32.const 1)) (i32.const 0))
(assert_return (invoke "u32_sub" (i32.const 1) (i32.const 0)) (i32.const 1))
(assert_return (invoke "u32_sub" (i32.const -1) (i32.const -1)) (i32.const 0))
(assert_trap (invoke "u32_sub" (i32.const 0x7fffffff) (i32.const -1)) "integer overflow")
(assert_return (invoke "u32_sub" (i32.const 0x80000000) (i32.const 1)) (i32.const 0x7fffffff))
(assert_return (invoke "u32_sub" (i32.const 0x80000000) (i32.const 0x80000000)) (i32.const 0))
(assert_trap (invoke "u32_sub" (i32.const 0x3fffffff) (i32.const -1)) "integer overflow")

(assert_return (invoke "i32_mul" (i32.const 1) (i32.const 1)) (i32.const 1))
(assert_return (invoke "i32_mul" (i32.const 1) (i32.const 0)) (i32.const 0))
(assert_return (invoke "i32_mul" (i32.const -1) (i32.const -1)) (i32.const 1))
(assert_trap (invoke "i32_mul" (i32.const 0x10000000) (i32.const 4096)) "integer overflow")
(assert_return (invoke "i32_mul" (i32.const 0x80000000) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "i32_mul" (i32.const 0x80000000) (i32.const -1)) "integer overflow")
(assert_return (invoke "i32_mul" (i32.const 0x7fffffff) (i32.const -1)) (i32.const 0x80000001))
(assert_trap (invoke "i32_mul" (i32.const 0x01234567) (i32.const 0x76543210)) "integer overflow")
(assert_trap (invoke "i32_mul" (i32.const 0x7fffffff) (i32.const 0x7fffffff)) "integer overflow")

(assert_return (invoke "u32_mul" (i32.const 1) (i32.const 1)) (i32.const 1))
(assert_return (invoke "u32_mul" (i32.const 1) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "u32_mul" (i32.const -1) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u32_mul" (i32.const 0x10000000) (i32.const 4096)) "integer overflow")
(assert_return (invoke "u32_mul" (i32.const 0x80000000) (i32.const 0)) (i32.const 0))
(assert_trap (invoke "u32_mul" (i32.const 0x80000000) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u32_mul" (i32.const 0x7fffffff) (i32.const -1)) "integer overflow")
(assert_trap (invoke "u32_mul" (i32.const 0x01234567) (i32.const 0x76543210)) "integer overflow")
(assert_trap (invoke "u32_mul" (i32.const 0x7fffffff) (i32.const 0x7fffffff)) "integer overflow")

(assert_return (invoke "i64_add" (i64.const 1) (i64.const 1)) (i64.const 2))
(assert_return (invoke "i64_add" (i64.const 1) (i64.const 0)) (i64.const 1))
(assert_return (invoke "i64_add" (i64.const -1) (i64.const -1)) (i64.const -2))
(assert_return (invoke "i64_add" (i64.const -1) (i64.const 1)) (i64.const 0))
(assert_trap (invoke "i64_add" (i64.const 0x7fffffffffffffff) (i64.const 1)) "integer overflow")
(assert_trap (invoke "i64_add" (i64.const 0x8000000000000000) (i64.const -1)) "integer overflow")
(assert_trap (invoke "i64_add" (i64.const 0x8000000000000000) (i64.const 0x8000000000000000)) "integer overflow")
(assert_return (invoke "i64_add" (i64.const 0x3fffffff) (i64.const 1)) (i64.const 0x40000000))

(assert_return (invoke "u64_add" (i64.const 1) (i64.const 1)) (i64.const 2))
(assert_return (invoke "u64_add" (i64.const 1) (i64.const 0)) (i64.const 1))
(assert_trap (invoke "u64_add" (i64.const -1) (i64.const -1)) "integer overflow")
(assert_trap (invoke "u64_add" (i64.const -1) (i64.const 1)) "integer overflow")
(assert_return (invoke "u64_add" (i64.const 0x7fffffffffffffff) (i64.const 1)) (i64.const 0x8000000000000000))
(assert_trap (invoke "u64_add" (i64.const 0x8000000000000000) (i64.const -1)) "integer overflow")
(assert_trap (invoke "u64_add" (i64.const 0x8000000000000000) (i64.const 0x8000000000000000)) "integer overflow")
(assert_return (invoke "u64_add" (i64.const 0x3fffffff) (i64.const 1)) (i64.const 0x40000000))

(assert_return (invoke "i64_sub" (i64.const 1) (i64.const 1)) (i64.const 0))
(assert_return (invoke "i64_sub" (i64.const 1) (i64.const 0)) (i64.const 1))
(assert_return (invoke "i64_sub" (i64.const -1) (i64.const -1)) (i64.const 0))
(assert_trap (invoke "i64_sub" (i64.const 0x7fffffffffffffff) (i64.const -1)) "integer overflow")
(assert_trap (invoke "i64_sub" (i64.const 0x8000000000000000) (i64.const 1)) "integer overflow")
(assert_return (invoke "i64_sub" (i64.const 0x8000000000000000) (i64.const 0x8000000000000000)) (i64.const 0))
(assert_return (invoke "i64_sub" (i64.const 0x3fffffff) (i64.const -1)) (i64.const 0x40000000))

(assert_return (invoke "u64_sub" (i64.const 1) (i64.const 1)) (i64.const 0))
(assert_return (invoke "u64_sub" (i64.const 1) (i64.const 0)) (i64.const 1))
(assert_return (invoke "u64_sub" (i64.const -1) (i64.const -1)) (i64.const 0))
(assert_trap (invoke "u64_sub" (i64.const 0x7fffffffffffffff) (i64.const -1)) "integer overflow")
(assert_return (invoke "u64_sub" (i64.const 0x8000000000000000) (i64.const 1)) (i64.const 0x7fffffffffffffff))
(assert_return (invoke "u64_sub" (i64.const 0x8000000000000000) (i64.const 0x8000000000000000)) (i64.const 0))
(assert_trap (invoke "u64_sub" (i64.const 0x3fffffff) (i64.const -1)) "integer overflow")

(assert_return (invoke "i64_mul" (i64.const 1) (i64.const 1)) (i64.const 1))
(assert_return (invoke "i64_mul" (i64.const 1) (i64.const 0)) (i64.const 0))
(assert_return (invoke "i64_mul" (i64.const -1) (i64.const -1)) (i64.const 1))
(assert_trap (invoke "i64_mul" (i64.const 0x1000000000000000) (i64.const 4096)) "integer overflow")
(assert_return (invoke "i64_mul" (i64.const 0x8000000000000000) (i64.const 0)) (i64.const 0))
(assert_trap (invoke "i64_mul" (i64.const 0x8000000000000000) (i64.const -1)) "integer overflow")
(assert_return (invoke "i64_mul" (i64.const 0x7fffffffffffffff) (i64.const -1)) (i64.const 0x8000000000000001))
(assert_trap (invoke "i64_mul" (i64.const 0x0123456789abcdef) (i64.const 0xfedcba9876543210)) "integer overflow")
(assert_trap (invoke "i64_mul" (i64.const 0x7fffffffffffffff) (i64.const 0x7fffffffffffffff)) "integer overflow")

(assert_return (invoke "u64_mul" (i64.const 1) (i64.const 1)) (i64.const 1))
(assert_return (invoke "u64_mul" (i64.const 1) (i64.const 0)) (i64.const 0))
(assert_trap (invoke "u64_mul" (i64.const -1) (i64.const -1)) "integer overflow")
(assert_trap (invoke "u64_mul" (i64.const 0x1000000000000000) (i64.const 4096)) "integer overflow")
(assert_return (invoke "u64_mul" (i64.const 0x8000000000000000) (i64.const 0)) (i64.const 0))
(assert_trap (invoke "u64_mul" (i64.const 0x8000000000000000) (i64.const -1)) "integer overflow")
(assert_trap (invoke "u64_mul" (i64.const 0x7fffffffffffffff) (i64.const -1)) "integer overflow")
(assert_trap (invoke "u64_mul" (i64.const 0x0123456789abcdef) (i64.const 0xfedcba9876543210)) "integer overflow")
(assert_trap (invoke "u64_mul" (i64.const 0x7fffffffffffffff) (i64.const 0x7fffffffffffffff)) "integer overflow")

(assert_return (invoke "i128_add" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 1)) (i64.const 2))
(assert_return (invoke "i128_add" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 0)) (i64.const 1))
(assert_return (invoke "i128_add" (i64.const -1) (i64.const -1) (i64.const -1) (i64.const -1)) (i64.const -1))
(assert_return (invoke "i128_add" (i64.const -1) (i64.const -1) (i64.const 1) (i64.const 0)) (i64.const 0))
(assert_trap (invoke "i128_add" (i64.const -1) (i64.const 0x7fffffffffffffff) (i64.const 1) (i64.const 0)) "integer overflow")
(assert_trap (invoke "i128_add" (i64.const 0) (i64.const 0x8000000000000000) (i64.const -1) (i64.const -1)) "integer overflow")
(assert_trap (invoke "i128_add" (i64.const 0) (i64.const 0x8000000000000000) (i64.const 0) (i64.const 0x8000000000000000)) "integer overflow")
(assert_return (invoke "i128_add" (i64.const -1) (i64.const 0x3fffffff) (i64.const 1) (i64.const 0)) (i64.const 0x40000000))

(assert_return (invoke "u128_add" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 1)) (i64.const 2))
(assert_return (invoke "u128_add" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 0)) (i64.const 1))
(assert_trap (invoke "u128_add" (i64.const -1) (i64.const -1) (i64.const -1) (i64.const -1)) "integer overflow")
(assert_trap (invoke "u128_add" (i64.const -1) (i64.const -1) (i64.const 1) (i64.const 0)) "integer overflow")
(assert_return (invoke "u128_add" (i64.const -1) (i64.const 0x7fffffffffffffff) (i64.const 1) (i64.const 0)) (i64.const 0x8000000000000000))
(assert_trap (invoke "u128_add" (i64.const 0) (i64.const 0x8000000000000000) (i64.const -1) (i64.const -1)) "integer overflow")
(assert_trap (invoke "u128_add" (i64.const 0) (i64.const 0x8000000000000000) (i64.const 0) (i64.const 0x8000000000000000)) "integer overflow")
(assert_return (invoke "u128_add" (i64.const -1) (i64.const 0x3fffffff) (i64.const 1) (i64.const 0)) (i64.const 0x40000000))

(assert_return (invoke "i128_sub" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 1)) (i64.const 0))
(assert_return (invoke "i128_sub" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 0)) (i64.const 1))
(assert_return (invoke "i128_sub" (i64.const -1) (i64.const -1) (i64.const -1) (i64.const -1)) (i64.const 0))
(assert_trap (invoke "i128_sub" (i64.const -1) (i64.const 0x7fffffffffffffff) (i64.const -1) (i64.const -1)) "integer overflow")
(assert_trap (invoke "i128_sub" (i64.const 0) (i64.const 0x8000000000000000) (i64.const 1) (i64.const 0)) "integer overflow")
(assert_return (invoke "i128_sub" (i64.const 0) (i64.const 0x8000000000000000) (i64.const 0) (i64.const 0x8000000000000000)) (i64.const 0))
(assert_return (invoke "i128_sub" (i64.const -1) (i64.const 0x3fffffff) (i64.const -1) (i64.const -1)) (i64.const 0x40000000))

(assert_return (invoke "u128_sub" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 1)) (i64.const 0))
(assert_return (invoke "u128_sub" (i64.const 0) (i64.const 1) (i64.const 0) (i64.const 0)) (i64.const 1))
(assert_return (invoke "u128_sub" (i64.const -1) (i64.const -1) (i64.const -1) (i64.const -1)) (i64.const 0))
(assert_trap (invoke "u128_sub" (i64.const -1) (i64.const 0x7fffffffffffffff) (i64.const -1) (i64.const -1)) "integer overflow")
(assert_return (invoke "u128_sub" (i64.const 0) (i64.const 0x8000000000000000) (i64.const 1) (i64.const 0)) (i64.const 0x7fffffffffffffff))
(assert_return (invoke "u128_sub" (i64.const 0) (i64.const 0x8000000000000000) (i64.const 0) (i64.const 0x8000000000000000)) (i64.const 0))
(assert_trap (invoke "u128_sub" (i64.const -1) (i64.const 0x3fffffff) (i64.const -1) (i64.const -1)) "integer overflow")