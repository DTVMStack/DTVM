// Copyright (C) 2021-2023 the DTVM authors. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// ============================================================================
// opcode.def
//
// define all wasm opcode
//
// ============================================================================

#ifdef DEFINE_WASM_OPCODE

DEFINE_WASM_OPCODE(UNREACHABLE,	0x00,	"unreachable")
DEFINE_WASM_OPCODE(NOP,		0x01,	"nop")
DEFINE_WASM_OPCODE(BLOCK,	0x02,	"block")
DEFINE_WASM_OPCODE(LOOP,	0x03,	"loop")
DEFINE_WASM_OPCODE(IF,		0x04,	"if")
DEFINE_WASM_OPCODE(ELSE,	0x05,	"else")
DEFINE_WASM_OPCODE(UNUSED_0x06,	0x06,	"unused_0x06")
DEFINE_WASM_OPCODE(UNUSED_0x07,	0x07,	"unused_0x07")
DEFINE_WASM_OPCODE(UNUSED_0x08,	0x08,	"unused_0x08")
DEFINE_WASM_OPCODE(UNUSED_0x09,	0x09,	"unused_0x09")
DEFINE_WASM_OPCODE(UNUSED_0x0a,	0x0a,	"unused_0x0a")
DEFINE_WASM_OPCODE(END,		0x0b,	"end")
DEFINE_WASM_OPCODE(BR,		0x0c,	"br")
DEFINE_WASM_OPCODE(BR_IF,	0x0d,	"br_if")
DEFINE_WASM_OPCODE(BR_TABLE,	0x0e,	"br_table")
DEFINE_WASM_OPCODE(RETURN,	0x0f,	"return")
DEFINE_WASM_OPCODE(CALL,	0x10,	"call")
DEFINE_WASM_OPCODE(CALL_INDIRECT,	0x11,	"call_indirect")
DEFINE_WASM_OPCODE(UNUSED_0x12,	0x12,	"unused_0x12")
DEFINE_WASM_OPCODE(UNUSED_0x13,	0x13,	"unused_0x13")
DEFINE_WASM_OPCODE(UNUSED_0x14,	0x14,	"unused_0x14")
DEFINE_WASM_OPCODE(UNUSED_0x15,	0x15,	"unused_0x15")
DEFINE_WASM_OPCODE(UNUSED_0x16,	0x16,	"unused_0x16")
DEFINE_WASM_OPCODE(UNUSED_0x17,	0x17,	"unused_0x17")
DEFINE_WASM_OPCODE(UNUSED_0x18,	0x18,	"unused_0x18")
DEFINE_WASM_OPCODE(UNUSED_0x19,	0x19,	"unused_0x19")
DEFINE_WASM_OPCODE(DROP,	0x1a,	"drop")
DEFINE_WASM_OPCODE(SELECT,	0x1b,	"select")
DEFINE_WASM_OPCODE(UNUSED_0x1c,	0x1c,	"unused_0x1c")
DEFINE_WASM_OPCODE(GET_GLOBAL_64,	0x1d,	"get_global_64")
DEFINE_WASM_OPCODE(SET_GLOBAL_64,	0x1e,	"set_global_64")
DEFINE_WASM_OPCODE(UNUSED_0x1f,	0x1f,	"unused_0x1f")
DEFINE_WASM_OPCODE(GET_LOCAL,	0x20,	"get_local")
DEFINE_WASM_OPCODE(SET_LOCAL,	0x21,	"set_local")
DEFINE_WASM_OPCODE(TEE_LOCAL,	0x22,	"tee_local")
DEFINE_WASM_OPCODE(GET_GLOBAL,	0x23,	"get_global")
DEFINE_WASM_OPCODE(SET_GLOBAL,	0x24,	"set_global")
DEFINE_WASM_OPCODE(UNUSED_0x25,	0x25,	"unused_0x25")
DEFINE_WASM_OPCODE(UNUSED_0x26,	0x26,	"unused_0x26")
DEFINE_WASM_OPCODE(UNUSED_0x27,	0x27,	"unused_0x27")
DEFINE_WASM_OPCODE(I32_LOAD,	0x28,	"i32_load")
DEFINE_WASM_OPCODE(I64_LOAD,	0x29,	"i64_load")
DEFINE_WASM_OPCODE(F32_LOAD,	0x2a,	"f32_load")
DEFINE_WASM_OPCODE(F64_LOAD,	0x2b,	"f64_load")
DEFINE_WASM_OPCODE(I32_LOAD8_S,	0x2c,	"i32_load8_s")
DEFINE_WASM_OPCODE(I32_LOAD8_U,	0x2d,	"i32_load8_u")
DEFINE_WASM_OPCODE(I32_LOAD16_S,	0x2e,	"i32_load16_s")
DEFINE_WASM_OPCODE(I32_LOAD16_U,	0x2f,	"i32_load16_u")
DEFINE_WASM_OPCODE(I64_LOAD8_S,	0x30,	"i64_load8_s")
DEFINE_WASM_OPCODE(I64_LOAD8_U,	0x31,	"i64_load8_u")
DEFINE_WASM_OPCODE(I64_LOAD16_S,	0x32,	"i64_load16_s")
DEFINE_WASM_OPCODE(I64_LOAD16_U,	0x33,	"i64_load16_u")
DEFINE_WASM_OPCODE(I64_LOAD32_S,	0x34,	"i64_load32_s")
DEFINE_WASM_OPCODE(I64_LOAD32_U,	0x35,	"i64_load32_u")
DEFINE_WASM_OPCODE(I32_STORE,	0x36,	"i32_store")
DEFINE_WASM_OPCODE(I64_STORE,	0x37,	"i64_store")
DEFINE_WASM_OPCODE(F32_STORE,	0x38,	"f32_store")
DEFINE_WASM_OPCODE(F64_STORE,	0x39,	"f64_store")
DEFINE_WASM_OPCODE(I32_STORE8,	0x3a,	"i32_store8")
DEFINE_WASM_OPCODE(I32_STORE16,	0x3b,	"i32_store16")
DEFINE_WASM_OPCODE(I64_STORE8,	0x3c,	"i64_store8")
DEFINE_WASM_OPCODE(I64_STORE16,	0x3d,	"i64_store16")
DEFINE_WASM_OPCODE(I64_STORE32,	0x3e,	"i64_store32")
DEFINE_WASM_OPCODE(MEMORY_SIZE,	0x3f,	"memory_size")
DEFINE_WASM_OPCODE(MEMORY_GROW,	0x40,	"memory_grow")
DEFINE_WASM_OPCODE(I32_CONST,	0x41,	"i32_const")
DEFINE_WASM_OPCODE(I64_CONST,	0x42,	"i64_const")
DEFINE_WASM_OPCODE(F32_CONST,	0x43,	"f32_const")
DEFINE_WASM_OPCODE(F64_CONST,	0x44,	"f64_const")
DEFINE_WASM_OPCODE(I32_EQZ,	0x45,	"i32_eqz")
DEFINE_WASM_OPCODE(I32_EQ,	0x46,	"i32_eq")
DEFINE_WASM_OPCODE(I32_NE,	0x47,	"i32_ne")
DEFINE_WASM_OPCODE(I32_LT_S,	0x48,	"i32_lt_s")
DEFINE_WASM_OPCODE(I32_LT_U,	0x49,	"i32_lt_u")
DEFINE_WASM_OPCODE(I32_GT_S,	0x4a,	"i32_gt_s")
DEFINE_WASM_OPCODE(I32_GT_U,	0x4b,	"i32_gt_u")
DEFINE_WASM_OPCODE(I32_LE_S,	0x4c,	"i32_le_s")
DEFINE_WASM_OPCODE(I32_LE_U,	0x4d,	"i32_le_u")
DEFINE_WASM_OPCODE(I32_GE_S,	0x4e,	"i32_ge_s")
DEFINE_WASM_OPCODE(I32_GE_U,	0x4f,	"i32_ge_u")
DEFINE_WASM_OPCODE(I64_EQZ,	0x50,	"i64_eqz")
DEFINE_WASM_OPCODE(I64_EQ,	0x51,	"i64_eq")
DEFINE_WASM_OPCODE(I64_NE,	0x52,	"i64_ne")
DEFINE_WASM_OPCODE(I64_LT_S,	0x53,	"i64_lt_s")
DEFINE_WASM_OPCODE(I64_LT_U,	0x54,	"i64_lt_u")
DEFINE_WASM_OPCODE(I64_GT_S,	0x55,	"i64_gt_s")
DEFINE_WASM_OPCODE(I64_GT_U,	0x56,	"i64_gt_u")
DEFINE_WASM_OPCODE(I64_LE_S,	0x57,	"i64_le_s")
DEFINE_WASM_OPCODE(I64_LE_U,	0x58,	"i64_le_u")
DEFINE_WASM_OPCODE(I64_GE_S,	0x59,	"i64_ge_s")
DEFINE_WASM_OPCODE(I64_GE_U,	0x5a,	"i64_ge_u")
DEFINE_WASM_OPCODE(F32_EQ,	0x5b,	"f32_eq")
DEFINE_WASM_OPCODE(F32_NE,	0x5c,	"f32_ne")
DEFINE_WASM_OPCODE(F32_LT,	0x5d,	"f32_lt")
DEFINE_WASM_OPCODE(F32_GT,	0x5e,	"f32_gt")
DEFINE_WASM_OPCODE(F32_LE,	0x5f,	"f32_le")
DEFINE_WASM_OPCODE(F32_GE,	0x60,	"f32_ge")
DEFINE_WASM_OPCODE(F64_EQ,	0x61,	"f64_eq")
DEFINE_WASM_OPCODE(F64_NE,	0x62,	"f64_ne")
DEFINE_WASM_OPCODE(F64_LT,	0x63,	"f64_lt")
DEFINE_WASM_OPCODE(F64_GT,	0x64,	"f64_gt")
DEFINE_WASM_OPCODE(F64_LE,	0x65,	"f64_le")
DEFINE_WASM_OPCODE(F64_GE,	0x66,	"f64_ge")
DEFINE_WASM_OPCODE(I32_CLZ,	0x67,	"i32_clz")
DEFINE_WASM_OPCODE(I32_CTZ,	0x68,	"i32_ctz")
DEFINE_WASM_OPCODE(I32_POPCNT,	0x69,	"i32_popcnt")
DEFINE_WASM_OPCODE(I32_ADD,	0x6a,	"i32_add")
DEFINE_WASM_OPCODE(I32_SUB,	0x6b,	"i32_sub")
DEFINE_WASM_OPCODE(I32_MUL,	0x6c,	"i32_mul")
DEFINE_WASM_OPCODE(I32_DIV_S,	0x6d,	"i32_div_s")
DEFINE_WASM_OPCODE(I32_DIV_U,	0x6e,	"i32_div_u")
DEFINE_WASM_OPCODE(I32_REM_S,	0x6f,	"i32_rem_s")
DEFINE_WASM_OPCODE(I32_REM_U,	0x70,	"i32_rem_u")
DEFINE_WASM_OPCODE(I32_AND,	0x71,	"i32_and")
DEFINE_WASM_OPCODE(I32_OR,	0x72,	"i32_or")
DEFINE_WASM_OPCODE(I32_XOR,	0x73,	"i32_xor")
DEFINE_WASM_OPCODE(I32_SHL,	0x74,	"i32_shl")
DEFINE_WASM_OPCODE(I32_SHR_S,	0x75,	"i32_shr_s")
DEFINE_WASM_OPCODE(I32_SHR_U,	0x76,	"i32_shr_u")
DEFINE_WASM_OPCODE(I32_ROTL,	0x77,	"i32_rotl")
DEFINE_WASM_OPCODE(I32_ROTR,	0x78,	"i32_rotr")
DEFINE_WASM_OPCODE(I64_CLZ,	0x79,	"i64_clz")
DEFINE_WASM_OPCODE(I64_CTZ,	0x7a,	"i64_ctz")
DEFINE_WASM_OPCODE(I64_POPCNT,	0x7b,	"i64_popcnt")
DEFINE_WASM_OPCODE(I64_ADD,	0x7c,	"i64_add")
DEFINE_WASM_OPCODE(I64_SUB,	0x7d,	"i64_sub")
DEFINE_WASM_OPCODE(I64_MUL,	0x7e,	"i64_mul")
DEFINE_WASM_OPCODE(I64_DIV_S,	0x7f,	"i64_div_s")
DEFINE_WASM_OPCODE(I64_DIV_U,	0x80,	"i64_div_u")
DEFINE_WASM_OPCODE(I64_REM_S,	0x81,	"i64_rem_s")
DEFINE_WASM_OPCODE(I64_REM_U,	0x82,	"i64_rem_u")
DEFINE_WASM_OPCODE(I64_AND,	0x83,	"i64_and")
DEFINE_WASM_OPCODE(I64_OR,	0x84,	"i64_or")
DEFINE_WASM_OPCODE(I64_XOR,	0x85,	"i64_xor")
DEFINE_WASM_OPCODE(I64_SHL,	0x86,	"i64_shl")
DEFINE_WASM_OPCODE(I64_SHR_S,	0x87,	"i64_shr_s")
DEFINE_WASM_OPCODE(I64_SHR_U,	0x88,	"i64_shr_u")
DEFINE_WASM_OPCODE(I64_ROTL,	0x89,	"i64_rotl")
DEFINE_WASM_OPCODE(I64_ROTR,	0x8a,	"i64_rotr")
DEFINE_WASM_OPCODE(F32_ABS,	0x8b,	"f32_abs")
DEFINE_WASM_OPCODE(F32_NEG,	0x8c,	"f32_neg")
DEFINE_WASM_OPCODE(F32_CEIL,	0x8d,	"f32_ceil")
DEFINE_WASM_OPCODE(F32_FLOOR,	0x8e,	"f32_floor")
DEFINE_WASM_OPCODE(F32_TRUNC,	0x8f,	"f32_trunc")
DEFINE_WASM_OPCODE(F32_NEAREST,	0x90,	"f32_nearest")
DEFINE_WASM_OPCODE(F32_SQRT,	0x91,	"f32_sqrt")
DEFINE_WASM_OPCODE(F32_ADD,	0x92,	"f32_add")
DEFINE_WASM_OPCODE(F32_SUB,	0x93,	"f32_sub")
DEFINE_WASM_OPCODE(F32_MUL,	0x94,	"f32_mul")
DEFINE_WASM_OPCODE(F32_DIV,	0x95,	"f32_div")
DEFINE_WASM_OPCODE(F32_MIN,	0x96,	"f32_min")
DEFINE_WASM_OPCODE(F32_MAX,	0x97,	"f32_max")
DEFINE_WASM_OPCODE(F32_COPYSIGN,	0x98,	"f32_copysign")
DEFINE_WASM_OPCODE(F64_ABS,	0x99,	"f64_abs")
DEFINE_WASM_OPCODE(F64_NEG,	0x9a,	"f64_neg")
DEFINE_WASM_OPCODE(F64_CEIL,	0x9b,	"f64_ceil")
DEFINE_WASM_OPCODE(F64_FLOOR,	0x9c,	"f64_floor")
DEFINE_WASM_OPCODE(F64_TRUNC,	0x9d,	"f64_trunc")
DEFINE_WASM_OPCODE(F64_NEAREST,	0x9e,	"f64_nearest")
DEFINE_WASM_OPCODE(F64_SQRT,	0x9f,	"f64_sqrt")
DEFINE_WASM_OPCODE(F64_ADD,	0xa0,	"f64_add")
DEFINE_WASM_OPCODE(F64_SUB,	0xa1,	"f64_sub")
DEFINE_WASM_OPCODE(F64_MUL,	0xa2,	"f64_mul")
DEFINE_WASM_OPCODE(F64_DIV,	0xa3,	"f64_div")
DEFINE_WASM_OPCODE(F64_MIN,	0xa4,	"f64_min")
DEFINE_WASM_OPCODE(F64_MAX,	0xa5,	"f64_max")
DEFINE_WASM_OPCODE(F64_COPYSIGN,	0xa6,	"f64_copysign")
DEFINE_WASM_OPCODE(I32_WRAP_I64,	0xa7,	"i32_wrap_i64")
DEFINE_WASM_OPCODE(I32_TRUNC_S_F32,	0xa8,	"i32_trunc_s_f32")
DEFINE_WASM_OPCODE(I32_TRUNC_U_F32,	0xa9,	"i32_trunc_u_f32")
DEFINE_WASM_OPCODE(I32_TRUNC_S_F64,	0xaa,	"i32_trunc_s_f64")
DEFINE_WASM_OPCODE(I32_TRUNC_U_F64,	0xab,	"i32_trunc_u_f64")
DEFINE_WASM_OPCODE(I64_EXTEND_S_I32,	0xac,	"i64_extend_s_i32")
DEFINE_WASM_OPCODE(I64_EXTEND_U_I32,	0xad,	"i64_extend_u_i32")
DEFINE_WASM_OPCODE(I64_TRUNC_S_F32,	0xae,	"i64_trunc_s_f32")
DEFINE_WASM_OPCODE(I64_TRUNC_U_F32,	0xaf,	"i64_trunc_u_f32")
DEFINE_WASM_OPCODE(I64_TRUNC_S_F64,	0xb0,	"i64_trunc_s_f64")
DEFINE_WASM_OPCODE(I64_TRUNC_U_F64,	0xb1,	"i64_trunc_u_f64")
DEFINE_WASM_OPCODE(F32_CONVERT_S_I32,	0xb2,	"f32_convert_s_i32")
DEFINE_WASM_OPCODE(F32_CONVERT_U_I32,	0xb3,	"f32_convert_u_i32")
DEFINE_WASM_OPCODE(F32_CONVERT_S_I64,	0xb4,	"f32_convert_s_i64")
DEFINE_WASM_OPCODE(F32_CONVERT_U_I64,	0xb5,	"f32_convert_u_i64")
DEFINE_WASM_OPCODE(F32_DEMOTE_F64,	0xb6,	"f32_demote_f64")
DEFINE_WASM_OPCODE(F64_CONVERT_S_I32,	0xb7,	"f64_convert_s_i32")
DEFINE_WASM_OPCODE(F64_CONVERT_U_I32,	0xb8,	"f64_convert_u_i32")
DEFINE_WASM_OPCODE(F64_CONVERT_S_I64,	0xb9,	"f64_convert_s_i64")
DEFINE_WASM_OPCODE(F64_CONVERT_U_I64,	0xba,	"f64_convert_u_i64")
DEFINE_WASM_OPCODE(F64_PROMOTE_F32,	0xbb,	"f64_promote_f32")
DEFINE_WASM_OPCODE(I32_REINTERPRET_F32,	0xbc,	"i32_reinterpret_f32")
DEFINE_WASM_OPCODE(I64_REINTERPRET_F64,	0xbd,	"i64_reinterpret_f64")
DEFINE_WASM_OPCODE(F32_REINTERPRET_I32,	0xbe,	"f32_reinterpret_i32")
DEFINE_WASM_OPCODE(F64_REINTERPRET_I64,	0xbf,	"f64_reinterpret_i64")
DEFINE_WASM_OPCODE(I32_EXTEND8_S,	0xc0,	"i32_extend8_s")
DEFINE_WASM_OPCODE(I32_EXTEND16_S,	0xc1,	"i32_extend16_s")
DEFINE_WASM_OPCODE(I64_EXTEND8_S,	0xc2,	"i64_extend8_s")
DEFINE_WASM_OPCODE(I64_EXTEND16_S,	0xc3,	"i64_extend16_s")
DEFINE_WASM_OPCODE(I64_EXTEND32_S,	0xc4,	"i64_extend32_s")
DEFINE_WASM_OPCODE(DROP_64,	0xc5,	"drop_64")
DEFINE_WASM_OPCODE(SELECT_64,	0xc6,	"select_64")

#endif
